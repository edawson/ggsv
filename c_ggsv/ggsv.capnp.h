// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: ggsv.capnp

#ifndef CAPNP_INCLUDED_ec1eb48f4f0a275d_
#define CAPNP_INCLUDED_ec1eb48f4f0a275d_

#include <capnp/generated-header-support.h>

#if CAPNP_VERSION != 5003
#error "Version mismatch between generated code and library headers.  You must use the same version of the Cap'n Proto compiler and library."
#endif


namespace capnp {
namespace schemas {

CAPNP_DECLARE_SCHEMA(a77f6852786ade46);
CAPNP_DECLARE_SCHEMA(e89306a3b4325a8e);
CAPNP_DECLARE_SCHEMA(8bd5cc0e2f86b0c8);
CAPNP_DECLARE_SCHEMA(9762571de1f15a46);
CAPNP_DECLARE_SCHEMA(f5bd5b435bc24365);
CAPNP_DECLARE_SCHEMA(f2526b138f1e305b);
CAPNP_DECLARE_SCHEMA(ed952bc3fed2d5ce);
CAPNP_DECLARE_SCHEMA(f5caf4ca9157c066);
CAPNP_DECLARE_SCHEMA(c72d47ddb7352fb8);
CAPNP_DECLARE_SCHEMA(bffcb3d49a45d9dd);
CAPNP_DECLARE_SCHEMA(c4d753edaccb2edb);
CAPNP_DECLARE_SCHEMA(c917cdd202c04ed9);
CAPNP_DECLARE_SCHEMA(ddf188f745610925);

}  // namespace schemas
}  // namespace capnp


struct Graph {
  Graph() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(a77f6852786ade46, 0, 3)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct Node {
  Node() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(e89306a3b4325a8e, 1, 3)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct Edge {
  Edge() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(8bd5cc0e2f86b0c8, 3, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct Info {
  Info() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(9762571de1f15a46, 1, 3)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct Edit {
  Edit() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(f5bd5b435bc24365, 1, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct Mapping {
  Mapping() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(f2526b138f1e305b, 1, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct Position {
  Position() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(ed952bc3fed2d5ce, 2, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct Path {
  Path() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(f5caf4ca9157c066, 0, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct Alignment {
  Alignment() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(c72d47ddb7352fb8, 2, 9)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct Fragment {
  Fragment() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(bffcb3d49a45d9dd, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct KmerMatch {
  KmerMatch() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(c4d753edaccb2edb, 2, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct BasePileup {
  BasePileup() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(c917cdd202c04ed9, 1, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct NodePileup {
  NodePileup() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(ddf188f745610925, 1, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

// =======================================================================================

class Graph::Reader {
public:
  typedef Graph Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline bool hasNodes() const;
  inline  ::capnp::List< ::Node>::Reader getNodes() const;

  inline bool hasEdges() const;
  inline  ::capnp::List< ::Edge>::Reader getEdges() const;

  inline bool hasPaths() const;
  inline  ::capnp::List< ::Path>::Reader getPaths() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Graph::Builder {
public:
  typedef Graph Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasNodes();
  inline  ::capnp::List< ::Node>::Builder getNodes();
  inline void setNodes( ::capnp::List< ::Node>::Reader value);
  inline  ::capnp::List< ::Node>::Builder initNodes(unsigned int size);
  inline void adoptNodes(::capnp::Orphan< ::capnp::List< ::Node>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Node>> disownNodes();

  inline bool hasEdges();
  inline  ::capnp::List< ::Edge>::Builder getEdges();
  inline void setEdges( ::capnp::List< ::Edge>::Reader value);
  inline  ::capnp::List< ::Edge>::Builder initEdges(unsigned int size);
  inline void adoptEdges(::capnp::Orphan< ::capnp::List< ::Edge>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Edge>> disownEdges();

  inline bool hasPaths();
  inline  ::capnp::List< ::Path>::Builder getPaths();
  inline void setPaths( ::capnp::List< ::Path>::Reader value);
  inline  ::capnp::List< ::Path>::Builder initPaths(unsigned int size);
  inline void adoptPaths(::capnp::Orphan< ::capnp::List< ::Path>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Path>> disownPaths();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Graph::Pipeline {
public:
  typedef Graph Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Node::Reader {
public:
  typedef Node Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline bool hasSequence() const;
  inline  ::capnp::Text::Reader getSequence() const;

  inline bool hasName() const;
  inline  ::capnp::Text::Reader getName() const;

  inline  ::uint64_t getId() const;

  inline bool hasData() const;
  inline  ::capnp::Data::Reader getData() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Node::Builder {
public:
  typedef Node Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasSequence();
  inline  ::capnp::Text::Builder getSequence();
  inline void setSequence( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initSequence(unsigned int size);
  inline void adoptSequence(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownSequence();

  inline bool hasName();
  inline  ::capnp::Text::Builder getName();
  inline void setName( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initName(unsigned int size);
  inline void adoptName(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownName();

  inline  ::uint64_t getId();
  inline void setId( ::uint64_t value);

  inline bool hasData();
  inline  ::capnp::Data::Builder getData();
  inline void setData( ::capnp::Data::Reader value);
  inline  ::capnp::Data::Builder initData(unsigned int size);
  inline void adoptData(::capnp::Orphan< ::capnp::Data>&& value);
  inline ::capnp::Orphan< ::capnp::Data> disownData();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Node::Pipeline {
public:
  typedef Node Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Edge::Reader {
public:
  typedef Edge Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getSource() const;

  inline  ::uint64_t getSink() const;

  inline bool getFromSource() const;

  inline bool getToSink() const;

  inline bool hasData() const;
  inline  ::capnp::Data::Reader getData() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Edge::Builder {
public:
  typedef Edge Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getSource();
  inline void setSource( ::uint64_t value);

  inline  ::uint64_t getSink();
  inline void setSink( ::uint64_t value);

  inline bool getFromSource();
  inline void setFromSource(bool value);

  inline bool getToSink();
  inline void setToSink(bool value);

  inline bool hasData();
  inline  ::capnp::Data::Builder getData();
  inline void setData( ::capnp::Data::Reader value);
  inline  ::capnp::Data::Builder initData(unsigned int size);
  inline void adoptData(::capnp::Orphan< ::capnp::Data>&& value);
  inline ::capnp::Orphan< ::capnp::Data> disownData();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Edge::Pipeline {
public:
  typedef Edge Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Info::Reader {
public:
  typedef Info Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline bool hasId() const;
  inline  ::capnp::Text::Reader getId() const;

  inline bool hasStr() const;
  inline  ::capnp::Text::Reader getStr() const;

  inline  ::int64_t getInt() const;

  inline bool hasData() const;
  inline  ::capnp::Data::Reader getData() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Info::Builder {
public:
  typedef Info Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasId();
  inline  ::capnp::Text::Builder getId();
  inline void setId( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initId(unsigned int size);
  inline void adoptId(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownId();

  inline bool hasStr();
  inline  ::capnp::Text::Builder getStr();
  inline void setStr( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initStr(unsigned int size);
  inline void adoptStr(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownStr();

  inline  ::int64_t getInt();
  inline void setInt( ::int64_t value);

  inline bool hasData();
  inline  ::capnp::Data::Builder getData();
  inline void setData( ::capnp::Data::Reader value);
  inline  ::capnp::Data::Builder initData(unsigned int size);
  inline void adoptData(::capnp::Orphan< ::capnp::Data>&& value);
  inline ::capnp::Orphan< ::capnp::Data> disownData();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Info::Pipeline {
public:
  typedef Info Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Edit::Reader {
public:
  typedef Edit Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline  ::int32_t getFromLength() const;

  inline  ::int32_t getToLength() const;

  inline bool hasSequence() const;
  inline  ::capnp::Text::Reader getSequence() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Edit::Builder {
public:
  typedef Edit Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::int32_t getFromLength();
  inline void setFromLength( ::int32_t value);

  inline  ::int32_t getToLength();
  inline void setToLength( ::int32_t value);

  inline bool hasSequence();
  inline  ::capnp::Text::Builder getSequence();
  inline void setSequence( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initSequence(unsigned int size);
  inline void adoptSequence(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownSequence();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Edit::Pipeline {
public:
  typedef Edit Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Mapping::Reader {
public:
  typedef Mapping Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline bool hasPosition() const;
  inline  ::Position::Reader getPosition() const;

  inline bool hasEdits() const;
  inline  ::capnp::List< ::Edit>::Reader getEdits() const;

  inline bool getIsReverese() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Mapping::Builder {
public:
  typedef Mapping Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasPosition();
  inline  ::Position::Builder getPosition();
  inline void setPosition( ::Position::Reader value);
  inline  ::Position::Builder initPosition();
  inline void adoptPosition(::capnp::Orphan< ::Position>&& value);
  inline ::capnp::Orphan< ::Position> disownPosition();

  inline bool hasEdits();
  inline  ::capnp::List< ::Edit>::Builder getEdits();
  inline void setEdits( ::capnp::List< ::Edit>::Reader value);
  inline  ::capnp::List< ::Edit>::Builder initEdits(unsigned int size);
  inline void adoptEdits(::capnp::Orphan< ::capnp::List< ::Edit>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Edit>> disownEdits();

  inline bool getIsReverese();
  inline void setIsReverese(bool value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Mapping::Pipeline {
public:
  typedef Mapping Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::Position::Pipeline getPosition();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Position::Reader {
public:
  typedef Position Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getNodeId() const;

  inline  ::uint64_t getOffset() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Position::Builder {
public:
  typedef Position Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getNodeId();
  inline void setNodeId( ::uint64_t value);

  inline  ::uint64_t getOffset();
  inline void setOffset( ::uint64_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Position::Pipeline {
public:
  typedef Position Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Path::Reader {
public:
  typedef Path Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline bool hasName() const;
  inline  ::capnp::Text::Reader getName() const;

  inline bool hasMapping() const;
  inline  ::capnp::List< ::Mapping>::Reader getMapping() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Path::Builder {
public:
  typedef Path Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasName();
  inline  ::capnp::Text::Builder getName();
  inline void setName( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initName(unsigned int size);
  inline void adoptName(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownName();

  inline bool hasMapping();
  inline  ::capnp::List< ::Mapping>::Builder getMapping();
  inline void setMapping( ::capnp::List< ::Mapping>::Reader value);
  inline  ::capnp::List< ::Mapping>::Builder initMapping(unsigned int size);
  inline void adoptMapping(::capnp::Orphan< ::capnp::List< ::Mapping>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Mapping>> disownMapping();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Path::Pipeline {
public:
  typedef Path Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Alignment::Reader {
public:
  typedef Alignment Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline bool hasSequence() const;
  inline  ::capnp::Text::Reader getSequence() const;

  inline bool hasPath() const;
  inline  ::Path::Reader getPath() const;

  inline bool hasName() const;
  inline  ::capnp::Text::Reader getName() const;

  inline bool hasQuality() const;
  inline  ::capnp::Data::Reader getQuality() const;

  inline  ::int32_t getMappingQuality() const;

  inline  ::int32_t getScore() const;

  inline  ::int32_t getQueryPosition() const;

  inline bool getIsReverse() const;

  inline bool hasSampleName() const;
  inline  ::capnp::Text::Reader getSampleName() const;

  inline bool hasReadGroup() const;
  inline  ::capnp::Text::Reader getReadGroup() const;

  inline bool hasPrevGragment() const;
  inline  ::Alignment::Reader getPrevGragment() const;

  inline bool hasNextFragment() const;
  inline  ::Alignment::Reader getNextFragment() const;

  inline bool hasData() const;
  inline  ::capnp::Data::Reader getData() const;

  inline bool getIsSecondary() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Alignment::Builder {
public:
  typedef Alignment Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasSequence();
  inline  ::capnp::Text::Builder getSequence();
  inline void setSequence( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initSequence(unsigned int size);
  inline void adoptSequence(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownSequence();

  inline bool hasPath();
  inline  ::Path::Builder getPath();
  inline void setPath( ::Path::Reader value);
  inline  ::Path::Builder initPath();
  inline void adoptPath(::capnp::Orphan< ::Path>&& value);
  inline ::capnp::Orphan< ::Path> disownPath();

  inline bool hasName();
  inline  ::capnp::Text::Builder getName();
  inline void setName( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initName(unsigned int size);
  inline void adoptName(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownName();

  inline bool hasQuality();
  inline  ::capnp::Data::Builder getQuality();
  inline void setQuality( ::capnp::Data::Reader value);
  inline  ::capnp::Data::Builder initQuality(unsigned int size);
  inline void adoptQuality(::capnp::Orphan< ::capnp::Data>&& value);
  inline ::capnp::Orphan< ::capnp::Data> disownQuality();

  inline  ::int32_t getMappingQuality();
  inline void setMappingQuality( ::int32_t value);

  inline  ::int32_t getScore();
  inline void setScore( ::int32_t value);

  inline  ::int32_t getQueryPosition();
  inline void setQueryPosition( ::int32_t value);

  inline bool getIsReverse();
  inline void setIsReverse(bool value);

  inline bool hasSampleName();
  inline  ::capnp::Text::Builder getSampleName();
  inline void setSampleName( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initSampleName(unsigned int size);
  inline void adoptSampleName(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownSampleName();

  inline bool hasReadGroup();
  inline  ::capnp::Text::Builder getReadGroup();
  inline void setReadGroup( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initReadGroup(unsigned int size);
  inline void adoptReadGroup(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownReadGroup();

  inline bool hasPrevGragment();
  inline  ::Alignment::Builder getPrevGragment();
  inline void setPrevGragment( ::Alignment::Reader value);
  inline  ::Alignment::Builder initPrevGragment();
  inline void adoptPrevGragment(::capnp::Orphan< ::Alignment>&& value);
  inline ::capnp::Orphan< ::Alignment> disownPrevGragment();

  inline bool hasNextFragment();
  inline  ::Alignment::Builder getNextFragment();
  inline void setNextFragment( ::Alignment::Reader value);
  inline  ::Alignment::Builder initNextFragment();
  inline void adoptNextFragment(::capnp::Orphan< ::Alignment>&& value);
  inline ::capnp::Orphan< ::Alignment> disownNextFragment();

  inline bool hasData();
  inline  ::capnp::Data::Builder getData();
  inline void setData( ::capnp::Data::Reader value);
  inline  ::capnp::Data::Builder initData(unsigned int size);
  inline void adoptData(::capnp::Orphan< ::capnp::Data>&& value);
  inline ::capnp::Orphan< ::capnp::Data> disownData();

  inline bool getIsSecondary();
  inline void setIsSecondary(bool value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Alignment::Pipeline {
public:
  typedef Alignment Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::Path::Pipeline getPath();
  inline  ::Alignment::Pipeline getPrevGragment();
  inline  ::Alignment::Pipeline getNextFragment();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Fragment::Reader {
public:
  typedef Fragment Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline bool hasAlignments() const;
  inline  ::capnp::List< ::Alignment>::Reader getAlignments() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Fragment::Builder {
public:
  typedef Fragment Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasAlignments();
  inline  ::capnp::List< ::Alignment>::Builder getAlignments();
  inline void setAlignments( ::capnp::List< ::Alignment>::Reader value);
  inline  ::capnp::List< ::Alignment>::Builder initAlignments(unsigned int size);
  inline void adoptAlignments(::capnp::Orphan< ::capnp::List< ::Alignment>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Alignment>> disownAlignments();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Fragment::Pipeline {
public:
  typedef Fragment Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class KmerMatch::Reader {
public:
  typedef KmerMatch Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline bool hasSequence() const;
  inline  ::capnp::Text::Reader getSequence() const;

  inline  ::uint64_t getNodeId() const;

  inline  ::int32_t getPosition() const;

  inline bool getIsBackward() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class KmerMatch::Builder {
public:
  typedef KmerMatch Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasSequence();
  inline  ::capnp::Text::Builder getSequence();
  inline void setSequence( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initSequence(unsigned int size);
  inline void adoptSequence(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownSequence();

  inline  ::uint64_t getNodeId();
  inline void setNodeId( ::uint64_t value);

  inline  ::int32_t getPosition();
  inline void setPosition( ::int32_t value);

  inline bool getIsBackward();
  inline void setIsBackward(bool value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class KmerMatch::Pipeline {
public:
  typedef KmerMatch Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class BasePileup::Reader {
public:
  typedef BasePileup Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline  ::int32_t getRefBase() const;

  inline  ::int32_t getNumBases() const;

  inline bool hasBases() const;
  inline  ::capnp::Text::Reader getBases() const;

  inline bool hasQualities() const;
  inline  ::capnp::Data::Reader getQualities() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class BasePileup::Builder {
public:
  typedef BasePileup Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::int32_t getRefBase();
  inline void setRefBase( ::int32_t value);

  inline  ::int32_t getNumBases();
  inline void setNumBases( ::int32_t value);

  inline bool hasBases();
  inline  ::capnp::Text::Builder getBases();
  inline void setBases( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initBases(unsigned int size);
  inline void adoptBases(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownBases();

  inline bool hasQualities();
  inline  ::capnp::Data::Builder getQualities();
  inline void setQualities( ::capnp::Data::Reader value);
  inline  ::capnp::Data::Builder initQualities(unsigned int size);
  inline void adoptQualities(::capnp::Orphan< ::capnp::Data>&& value);
  inline ::capnp::Orphan< ::capnp::Data> disownQualities();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class BasePileup::Pipeline {
public:
  typedef BasePileup Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class NodePileup::Reader {
public:
  typedef NodePileup Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getNodeId() const;

  inline bool hasBasePileups() const;
  inline  ::capnp::List< ::BasePileup>::Reader getBasePileups() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class NodePileup::Builder {
public:
  typedef NodePileup Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getNodeId();
  inline void setNodeId( ::uint64_t value);

  inline bool hasBasePileups();
  inline  ::capnp::List< ::BasePileup>::Builder getBasePileups();
  inline void setBasePileups( ::capnp::List< ::BasePileup>::Reader value);
  inline  ::capnp::List< ::BasePileup>::Builder initBasePileups(unsigned int size);
  inline void adoptBasePileups(::capnp::Orphan< ::capnp::List< ::BasePileup>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::BasePileup>> disownBasePileups();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class NodePileup::Pipeline {
public:
  typedef NodePileup Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

// =======================================================================================

inline bool Graph::Reader::hasNodes() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool Graph::Builder::hasNodes() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Node>::Reader Graph::Reader::getNodes() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Node>>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Node>::Builder Graph::Builder::getNodes() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Node>>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void Graph::Builder::setNodes( ::capnp::List< ::Node>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Node>>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Node>::Builder Graph::Builder::initNodes(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Node>>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void Graph::Builder::adoptNodes(
    ::capnp::Orphan< ::capnp::List< ::Node>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Node>>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Node>> Graph::Builder::disownNodes() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Node>>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool Graph::Reader::hasEdges() const {
  return !_reader.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline bool Graph::Builder::hasEdges() {
  return !_builder.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Edge>::Reader Graph::Reader::getEdges() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Edge>>::get(
      _reader.getPointerField(1 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Edge>::Builder Graph::Builder::getEdges() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Edge>>::get(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
inline void Graph::Builder::setEdges( ::capnp::List< ::Edge>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Edge>>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Edge>::Builder Graph::Builder::initEdges(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Edge>>::init(
      _builder.getPointerField(1 * ::capnp::POINTERS), size);
}
inline void Graph::Builder::adoptEdges(
    ::capnp::Orphan< ::capnp::List< ::Edge>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Edge>>::adopt(
      _builder.getPointerField(1 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Edge>> Graph::Builder::disownEdges() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Edge>>::disown(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}

inline bool Graph::Reader::hasPaths() const {
  return !_reader.getPointerField(2 * ::capnp::POINTERS).isNull();
}
inline bool Graph::Builder::hasPaths() {
  return !_builder.getPointerField(2 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Path>::Reader Graph::Reader::getPaths() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Path>>::get(
      _reader.getPointerField(2 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Path>::Builder Graph::Builder::getPaths() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Path>>::get(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}
inline void Graph::Builder::setPaths( ::capnp::List< ::Path>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Path>>::set(
      _builder.getPointerField(2 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Path>::Builder Graph::Builder::initPaths(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Path>>::init(
      _builder.getPointerField(2 * ::capnp::POINTERS), size);
}
inline void Graph::Builder::adoptPaths(
    ::capnp::Orphan< ::capnp::List< ::Path>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Path>>::adopt(
      _builder.getPointerField(2 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Path>> Graph::Builder::disownPaths() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Path>>::disown(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}

inline bool Node::Reader::hasSequence() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool Node::Builder::hasSequence() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader Node::Reader::getSequence() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder Node::Builder::getSequence() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void Node::Builder::setSequence( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder Node::Builder::initSequence(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void Node::Builder::adoptSequence(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> Node::Builder::disownSequence() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool Node::Reader::hasName() const {
  return !_reader.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline bool Node::Builder::hasName() {
  return !_builder.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader Node::Reader::getName() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(1 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder Node::Builder::getName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
inline void Node::Builder::setName( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder Node::Builder::initName(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(1 * ::capnp::POINTERS), size);
}
inline void Node::Builder::adoptName(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(1 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> Node::Builder::disownName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}

inline  ::uint64_t Node::Reader::getId() const {
  return _reader.getDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS);
}

inline  ::uint64_t Node::Builder::getId() {
  return _builder.getDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS);
}
inline void Node::Builder::setId( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS, value);
}

inline bool Node::Reader::hasData() const {
  return !_reader.getPointerField(2 * ::capnp::POINTERS).isNull();
}
inline bool Node::Builder::hasData() {
  return !_builder.getPointerField(2 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Data::Reader Node::Reader::getData() const {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(
      _reader.getPointerField(2 * ::capnp::POINTERS));
}
inline  ::capnp::Data::Builder Node::Builder::getData() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}
inline void Node::Builder::setData( ::capnp::Data::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::set(
      _builder.getPointerField(2 * ::capnp::POINTERS), value);
}
inline  ::capnp::Data::Builder Node::Builder::initData(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::init(
      _builder.getPointerField(2 * ::capnp::POINTERS), size);
}
inline void Node::Builder::adoptData(
    ::capnp::Orphan< ::capnp::Data>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::adopt(
      _builder.getPointerField(2 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Data> Node::Builder::disownData() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::disown(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}

inline  ::uint64_t Edge::Reader::getSource() const {
  return _reader.getDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS);
}

inline  ::uint64_t Edge::Builder::getSource() {
  return _builder.getDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS);
}
inline void Edge::Builder::setSource( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Edge::Reader::getSink() const {
  return _reader.getDataField< ::uint64_t>(
      1 * ::capnp::ELEMENTS);
}

inline  ::uint64_t Edge::Builder::getSink() {
  return _builder.getDataField< ::uint64_t>(
      1 * ::capnp::ELEMENTS);
}
inline void Edge::Builder::setSink( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      1 * ::capnp::ELEMENTS, value);
}

inline bool Edge::Reader::getFromSource() const {
  return _reader.getDataField<bool>(
      128 * ::capnp::ELEMENTS);
}

inline bool Edge::Builder::getFromSource() {
  return _builder.getDataField<bool>(
      128 * ::capnp::ELEMENTS);
}
inline void Edge::Builder::setFromSource(bool value) {
  _builder.setDataField<bool>(
      128 * ::capnp::ELEMENTS, value);
}

inline bool Edge::Reader::getToSink() const {
  return _reader.getDataField<bool>(
      129 * ::capnp::ELEMENTS);
}

inline bool Edge::Builder::getToSink() {
  return _builder.getDataField<bool>(
      129 * ::capnp::ELEMENTS);
}
inline void Edge::Builder::setToSink(bool value) {
  _builder.setDataField<bool>(
      129 * ::capnp::ELEMENTS, value);
}

inline bool Edge::Reader::hasData() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool Edge::Builder::hasData() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Data::Reader Edge::Reader::getData() const {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::Data::Builder Edge::Builder::getData() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void Edge::Builder::setData( ::capnp::Data::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::Data::Builder Edge::Builder::initData(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void Edge::Builder::adoptData(
    ::capnp::Orphan< ::capnp::Data>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Data> Edge::Builder::disownData() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool Info::Reader::hasId() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool Info::Builder::hasId() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader Info::Reader::getId() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder Info::Builder::getId() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void Info::Builder::setId( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder Info::Builder::initId(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void Info::Builder::adoptId(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> Info::Builder::disownId() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool Info::Reader::hasStr() const {
  return !_reader.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline bool Info::Builder::hasStr() {
  return !_builder.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader Info::Reader::getStr() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(1 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder Info::Builder::getStr() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
inline void Info::Builder::setStr( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder Info::Builder::initStr(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(1 * ::capnp::POINTERS), size);
}
inline void Info::Builder::adoptStr(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(1 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> Info::Builder::disownStr() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}

inline  ::int64_t Info::Reader::getInt() const {
  return _reader.getDataField< ::int64_t>(
      0 * ::capnp::ELEMENTS);
}

inline  ::int64_t Info::Builder::getInt() {
  return _builder.getDataField< ::int64_t>(
      0 * ::capnp::ELEMENTS);
}
inline void Info::Builder::setInt( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      0 * ::capnp::ELEMENTS, value);
}

inline bool Info::Reader::hasData() const {
  return !_reader.getPointerField(2 * ::capnp::POINTERS).isNull();
}
inline bool Info::Builder::hasData() {
  return !_builder.getPointerField(2 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Data::Reader Info::Reader::getData() const {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(
      _reader.getPointerField(2 * ::capnp::POINTERS));
}
inline  ::capnp::Data::Builder Info::Builder::getData() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}
inline void Info::Builder::setData( ::capnp::Data::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::set(
      _builder.getPointerField(2 * ::capnp::POINTERS), value);
}
inline  ::capnp::Data::Builder Info::Builder::initData(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::init(
      _builder.getPointerField(2 * ::capnp::POINTERS), size);
}
inline void Info::Builder::adoptData(
    ::capnp::Orphan< ::capnp::Data>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::adopt(
      _builder.getPointerField(2 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Data> Info::Builder::disownData() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::disown(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}

inline  ::int32_t Edit::Reader::getFromLength() const {
  return _reader.getDataField< ::int32_t>(
      0 * ::capnp::ELEMENTS);
}

inline  ::int32_t Edit::Builder::getFromLength() {
  return _builder.getDataField< ::int32_t>(
      0 * ::capnp::ELEMENTS);
}
inline void Edit::Builder::setFromLength( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      0 * ::capnp::ELEMENTS, value);
}

inline  ::int32_t Edit::Reader::getToLength() const {
  return _reader.getDataField< ::int32_t>(
      1 * ::capnp::ELEMENTS);
}

inline  ::int32_t Edit::Builder::getToLength() {
  return _builder.getDataField< ::int32_t>(
      1 * ::capnp::ELEMENTS);
}
inline void Edit::Builder::setToLength( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      1 * ::capnp::ELEMENTS, value);
}

inline bool Edit::Reader::hasSequence() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool Edit::Builder::hasSequence() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader Edit::Reader::getSequence() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder Edit::Builder::getSequence() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void Edit::Builder::setSequence( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder Edit::Builder::initSequence(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void Edit::Builder::adoptSequence(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> Edit::Builder::disownSequence() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool Mapping::Reader::hasPosition() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool Mapping::Builder::hasPosition() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::Position::Reader Mapping::Reader::getPosition() const {
  return ::capnp::_::PointerHelpers< ::Position>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::Position::Builder Mapping::Builder::getPosition() {
  return ::capnp::_::PointerHelpers< ::Position>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::Position::Pipeline Mapping::Pipeline::getPosition() {
  return  ::Position::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void Mapping::Builder::setPosition( ::Position::Reader value) {
  ::capnp::_::PointerHelpers< ::Position>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::Position::Builder Mapping::Builder::initPosition() {
  return ::capnp::_::PointerHelpers< ::Position>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void Mapping::Builder::adoptPosition(
    ::capnp::Orphan< ::Position>&& value) {
  ::capnp::_::PointerHelpers< ::Position>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::Position> Mapping::Builder::disownPosition() {
  return ::capnp::_::PointerHelpers< ::Position>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool Mapping::Reader::hasEdits() const {
  return !_reader.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline bool Mapping::Builder::hasEdits() {
  return !_builder.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Edit>::Reader Mapping::Reader::getEdits() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Edit>>::get(
      _reader.getPointerField(1 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Edit>::Builder Mapping::Builder::getEdits() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Edit>>::get(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
inline void Mapping::Builder::setEdits( ::capnp::List< ::Edit>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Edit>>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Edit>::Builder Mapping::Builder::initEdits(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Edit>>::init(
      _builder.getPointerField(1 * ::capnp::POINTERS), size);
}
inline void Mapping::Builder::adoptEdits(
    ::capnp::Orphan< ::capnp::List< ::Edit>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Edit>>::adopt(
      _builder.getPointerField(1 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Edit>> Mapping::Builder::disownEdits() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Edit>>::disown(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}

inline bool Mapping::Reader::getIsReverese() const {
  return _reader.getDataField<bool>(
      0 * ::capnp::ELEMENTS);
}

inline bool Mapping::Builder::getIsReverese() {
  return _builder.getDataField<bool>(
      0 * ::capnp::ELEMENTS);
}
inline void Mapping::Builder::setIsReverese(bool value) {
  _builder.setDataField<bool>(
      0 * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Position::Reader::getNodeId() const {
  return _reader.getDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS);
}

inline  ::uint64_t Position::Builder::getNodeId() {
  return _builder.getDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS);
}
inline void Position::Builder::setNodeId( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Position::Reader::getOffset() const {
  return _reader.getDataField< ::uint64_t>(
      1 * ::capnp::ELEMENTS);
}

inline  ::uint64_t Position::Builder::getOffset() {
  return _builder.getDataField< ::uint64_t>(
      1 * ::capnp::ELEMENTS);
}
inline void Position::Builder::setOffset( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      1 * ::capnp::ELEMENTS, value);
}

inline bool Path::Reader::hasName() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool Path::Builder::hasName() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader Path::Reader::getName() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder Path::Builder::getName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void Path::Builder::setName( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder Path::Builder::initName(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void Path::Builder::adoptName(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> Path::Builder::disownName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool Path::Reader::hasMapping() const {
  return !_reader.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline bool Path::Builder::hasMapping() {
  return !_builder.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Mapping>::Reader Path::Reader::getMapping() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Mapping>>::get(
      _reader.getPointerField(1 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Mapping>::Builder Path::Builder::getMapping() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Mapping>>::get(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
inline void Path::Builder::setMapping( ::capnp::List< ::Mapping>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Mapping>>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Mapping>::Builder Path::Builder::initMapping(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Mapping>>::init(
      _builder.getPointerField(1 * ::capnp::POINTERS), size);
}
inline void Path::Builder::adoptMapping(
    ::capnp::Orphan< ::capnp::List< ::Mapping>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Mapping>>::adopt(
      _builder.getPointerField(1 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Mapping>> Path::Builder::disownMapping() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Mapping>>::disown(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}

inline bool Alignment::Reader::hasSequence() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool Alignment::Builder::hasSequence() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader Alignment::Reader::getSequence() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder Alignment::Builder::getSequence() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void Alignment::Builder::setSequence( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder Alignment::Builder::initSequence(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void Alignment::Builder::adoptSequence(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> Alignment::Builder::disownSequence() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool Alignment::Reader::hasPath() const {
  return !_reader.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline bool Alignment::Builder::hasPath() {
  return !_builder.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline  ::Path::Reader Alignment::Reader::getPath() const {
  return ::capnp::_::PointerHelpers< ::Path>::get(
      _reader.getPointerField(1 * ::capnp::POINTERS));
}
inline  ::Path::Builder Alignment::Builder::getPath() {
  return ::capnp::_::PointerHelpers< ::Path>::get(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::Path::Pipeline Alignment::Pipeline::getPath() {
  return  ::Path::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void Alignment::Builder::setPath( ::Path::Reader value) {
  ::capnp::_::PointerHelpers< ::Path>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), value);
}
inline  ::Path::Builder Alignment::Builder::initPath() {
  return ::capnp::_::PointerHelpers< ::Path>::init(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
inline void Alignment::Builder::adoptPath(
    ::capnp::Orphan< ::Path>&& value) {
  ::capnp::_::PointerHelpers< ::Path>::adopt(
      _builder.getPointerField(1 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::Path> Alignment::Builder::disownPath() {
  return ::capnp::_::PointerHelpers< ::Path>::disown(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}

inline bool Alignment::Reader::hasName() const {
  return !_reader.getPointerField(2 * ::capnp::POINTERS).isNull();
}
inline bool Alignment::Builder::hasName() {
  return !_builder.getPointerField(2 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader Alignment::Reader::getName() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(2 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder Alignment::Builder::getName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}
inline void Alignment::Builder::setName( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(2 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder Alignment::Builder::initName(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(2 * ::capnp::POINTERS), size);
}
inline void Alignment::Builder::adoptName(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(2 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> Alignment::Builder::disownName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}

inline bool Alignment::Reader::hasQuality() const {
  return !_reader.getPointerField(3 * ::capnp::POINTERS).isNull();
}
inline bool Alignment::Builder::hasQuality() {
  return !_builder.getPointerField(3 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Data::Reader Alignment::Reader::getQuality() const {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(
      _reader.getPointerField(3 * ::capnp::POINTERS));
}
inline  ::capnp::Data::Builder Alignment::Builder::getQuality() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(
      _builder.getPointerField(3 * ::capnp::POINTERS));
}
inline void Alignment::Builder::setQuality( ::capnp::Data::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::set(
      _builder.getPointerField(3 * ::capnp::POINTERS), value);
}
inline  ::capnp::Data::Builder Alignment::Builder::initQuality(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::init(
      _builder.getPointerField(3 * ::capnp::POINTERS), size);
}
inline void Alignment::Builder::adoptQuality(
    ::capnp::Orphan< ::capnp::Data>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::adopt(
      _builder.getPointerField(3 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Data> Alignment::Builder::disownQuality() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::disown(
      _builder.getPointerField(3 * ::capnp::POINTERS));
}

inline  ::int32_t Alignment::Reader::getMappingQuality() const {
  return _reader.getDataField< ::int32_t>(
      0 * ::capnp::ELEMENTS);
}

inline  ::int32_t Alignment::Builder::getMappingQuality() {
  return _builder.getDataField< ::int32_t>(
      0 * ::capnp::ELEMENTS);
}
inline void Alignment::Builder::setMappingQuality( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      0 * ::capnp::ELEMENTS, value);
}

inline  ::int32_t Alignment::Reader::getScore() const {
  return _reader.getDataField< ::int32_t>(
      1 * ::capnp::ELEMENTS);
}

inline  ::int32_t Alignment::Builder::getScore() {
  return _builder.getDataField< ::int32_t>(
      1 * ::capnp::ELEMENTS);
}
inline void Alignment::Builder::setScore( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      1 * ::capnp::ELEMENTS, value);
}

inline  ::int32_t Alignment::Reader::getQueryPosition() const {
  return _reader.getDataField< ::int32_t>(
      2 * ::capnp::ELEMENTS);
}

inline  ::int32_t Alignment::Builder::getQueryPosition() {
  return _builder.getDataField< ::int32_t>(
      2 * ::capnp::ELEMENTS);
}
inline void Alignment::Builder::setQueryPosition( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      2 * ::capnp::ELEMENTS, value);
}

inline bool Alignment::Reader::getIsReverse() const {
  return _reader.getDataField<bool>(
      96 * ::capnp::ELEMENTS);
}

inline bool Alignment::Builder::getIsReverse() {
  return _builder.getDataField<bool>(
      96 * ::capnp::ELEMENTS);
}
inline void Alignment::Builder::setIsReverse(bool value) {
  _builder.setDataField<bool>(
      96 * ::capnp::ELEMENTS, value);
}

inline bool Alignment::Reader::hasSampleName() const {
  return !_reader.getPointerField(4 * ::capnp::POINTERS).isNull();
}
inline bool Alignment::Builder::hasSampleName() {
  return !_builder.getPointerField(4 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader Alignment::Reader::getSampleName() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(4 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder Alignment::Builder::getSampleName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(4 * ::capnp::POINTERS));
}
inline void Alignment::Builder::setSampleName( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(4 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder Alignment::Builder::initSampleName(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(4 * ::capnp::POINTERS), size);
}
inline void Alignment::Builder::adoptSampleName(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(4 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> Alignment::Builder::disownSampleName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(4 * ::capnp::POINTERS));
}

inline bool Alignment::Reader::hasReadGroup() const {
  return !_reader.getPointerField(5 * ::capnp::POINTERS).isNull();
}
inline bool Alignment::Builder::hasReadGroup() {
  return !_builder.getPointerField(5 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader Alignment::Reader::getReadGroup() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(5 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder Alignment::Builder::getReadGroup() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(5 * ::capnp::POINTERS));
}
inline void Alignment::Builder::setReadGroup( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(5 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder Alignment::Builder::initReadGroup(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(5 * ::capnp::POINTERS), size);
}
inline void Alignment::Builder::adoptReadGroup(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(5 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> Alignment::Builder::disownReadGroup() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(5 * ::capnp::POINTERS));
}

inline bool Alignment::Reader::hasPrevGragment() const {
  return !_reader.getPointerField(6 * ::capnp::POINTERS).isNull();
}
inline bool Alignment::Builder::hasPrevGragment() {
  return !_builder.getPointerField(6 * ::capnp::POINTERS).isNull();
}
inline  ::Alignment::Reader Alignment::Reader::getPrevGragment() const {
  return ::capnp::_::PointerHelpers< ::Alignment>::get(
      _reader.getPointerField(6 * ::capnp::POINTERS));
}
inline  ::Alignment::Builder Alignment::Builder::getPrevGragment() {
  return ::capnp::_::PointerHelpers< ::Alignment>::get(
      _builder.getPointerField(6 * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::Alignment::Pipeline Alignment::Pipeline::getPrevGragment() {
  return  ::Alignment::Pipeline(_typeless.getPointerField(6));
}
#endif  // !CAPNP_LITE
inline void Alignment::Builder::setPrevGragment( ::Alignment::Reader value) {
  ::capnp::_::PointerHelpers< ::Alignment>::set(
      _builder.getPointerField(6 * ::capnp::POINTERS), value);
}
inline  ::Alignment::Builder Alignment::Builder::initPrevGragment() {
  return ::capnp::_::PointerHelpers< ::Alignment>::init(
      _builder.getPointerField(6 * ::capnp::POINTERS));
}
inline void Alignment::Builder::adoptPrevGragment(
    ::capnp::Orphan< ::Alignment>&& value) {
  ::capnp::_::PointerHelpers< ::Alignment>::adopt(
      _builder.getPointerField(6 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::Alignment> Alignment::Builder::disownPrevGragment() {
  return ::capnp::_::PointerHelpers< ::Alignment>::disown(
      _builder.getPointerField(6 * ::capnp::POINTERS));
}

inline bool Alignment::Reader::hasNextFragment() const {
  return !_reader.getPointerField(7 * ::capnp::POINTERS).isNull();
}
inline bool Alignment::Builder::hasNextFragment() {
  return !_builder.getPointerField(7 * ::capnp::POINTERS).isNull();
}
inline  ::Alignment::Reader Alignment::Reader::getNextFragment() const {
  return ::capnp::_::PointerHelpers< ::Alignment>::get(
      _reader.getPointerField(7 * ::capnp::POINTERS));
}
inline  ::Alignment::Builder Alignment::Builder::getNextFragment() {
  return ::capnp::_::PointerHelpers< ::Alignment>::get(
      _builder.getPointerField(7 * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::Alignment::Pipeline Alignment::Pipeline::getNextFragment() {
  return  ::Alignment::Pipeline(_typeless.getPointerField(7));
}
#endif  // !CAPNP_LITE
inline void Alignment::Builder::setNextFragment( ::Alignment::Reader value) {
  ::capnp::_::PointerHelpers< ::Alignment>::set(
      _builder.getPointerField(7 * ::capnp::POINTERS), value);
}
inline  ::Alignment::Builder Alignment::Builder::initNextFragment() {
  return ::capnp::_::PointerHelpers< ::Alignment>::init(
      _builder.getPointerField(7 * ::capnp::POINTERS));
}
inline void Alignment::Builder::adoptNextFragment(
    ::capnp::Orphan< ::Alignment>&& value) {
  ::capnp::_::PointerHelpers< ::Alignment>::adopt(
      _builder.getPointerField(7 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::Alignment> Alignment::Builder::disownNextFragment() {
  return ::capnp::_::PointerHelpers< ::Alignment>::disown(
      _builder.getPointerField(7 * ::capnp::POINTERS));
}

inline bool Alignment::Reader::hasData() const {
  return !_reader.getPointerField(8 * ::capnp::POINTERS).isNull();
}
inline bool Alignment::Builder::hasData() {
  return !_builder.getPointerField(8 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Data::Reader Alignment::Reader::getData() const {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(
      _reader.getPointerField(8 * ::capnp::POINTERS));
}
inline  ::capnp::Data::Builder Alignment::Builder::getData() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(
      _builder.getPointerField(8 * ::capnp::POINTERS));
}
inline void Alignment::Builder::setData( ::capnp::Data::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::set(
      _builder.getPointerField(8 * ::capnp::POINTERS), value);
}
inline  ::capnp::Data::Builder Alignment::Builder::initData(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::init(
      _builder.getPointerField(8 * ::capnp::POINTERS), size);
}
inline void Alignment::Builder::adoptData(
    ::capnp::Orphan< ::capnp::Data>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::adopt(
      _builder.getPointerField(8 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Data> Alignment::Builder::disownData() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::disown(
      _builder.getPointerField(8 * ::capnp::POINTERS));
}

inline bool Alignment::Reader::getIsSecondary() const {
  return _reader.getDataField<bool>(
      97 * ::capnp::ELEMENTS);
}

inline bool Alignment::Builder::getIsSecondary() {
  return _builder.getDataField<bool>(
      97 * ::capnp::ELEMENTS);
}
inline void Alignment::Builder::setIsSecondary(bool value) {
  _builder.setDataField<bool>(
      97 * ::capnp::ELEMENTS, value);
}

inline bool Fragment::Reader::hasAlignments() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool Fragment::Builder::hasAlignments() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Alignment>::Reader Fragment::Reader::getAlignments() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Alignment>>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Alignment>::Builder Fragment::Builder::getAlignments() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Alignment>>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void Fragment::Builder::setAlignments( ::capnp::List< ::Alignment>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Alignment>>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Alignment>::Builder Fragment::Builder::initAlignments(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Alignment>>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void Fragment::Builder::adoptAlignments(
    ::capnp::Orphan< ::capnp::List< ::Alignment>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Alignment>>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Alignment>> Fragment::Builder::disownAlignments() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Alignment>>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool KmerMatch::Reader::hasSequence() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool KmerMatch::Builder::hasSequence() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader KmerMatch::Reader::getSequence() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder KmerMatch::Builder::getSequence() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void KmerMatch::Builder::setSequence( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder KmerMatch::Builder::initSequence(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void KmerMatch::Builder::adoptSequence(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> KmerMatch::Builder::disownSequence() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline  ::uint64_t KmerMatch::Reader::getNodeId() const {
  return _reader.getDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS);
}

inline  ::uint64_t KmerMatch::Builder::getNodeId() {
  return _builder.getDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS);
}
inline void KmerMatch::Builder::setNodeId( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS, value);
}

inline  ::int32_t KmerMatch::Reader::getPosition() const {
  return _reader.getDataField< ::int32_t>(
      2 * ::capnp::ELEMENTS);
}

inline  ::int32_t KmerMatch::Builder::getPosition() {
  return _builder.getDataField< ::int32_t>(
      2 * ::capnp::ELEMENTS);
}
inline void KmerMatch::Builder::setPosition( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      2 * ::capnp::ELEMENTS, value);
}

inline bool KmerMatch::Reader::getIsBackward() const {
  return _reader.getDataField<bool>(
      96 * ::capnp::ELEMENTS);
}

inline bool KmerMatch::Builder::getIsBackward() {
  return _builder.getDataField<bool>(
      96 * ::capnp::ELEMENTS);
}
inline void KmerMatch::Builder::setIsBackward(bool value) {
  _builder.setDataField<bool>(
      96 * ::capnp::ELEMENTS, value);
}

inline  ::int32_t BasePileup::Reader::getRefBase() const {
  return _reader.getDataField< ::int32_t>(
      0 * ::capnp::ELEMENTS);
}

inline  ::int32_t BasePileup::Builder::getRefBase() {
  return _builder.getDataField< ::int32_t>(
      0 * ::capnp::ELEMENTS);
}
inline void BasePileup::Builder::setRefBase( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      0 * ::capnp::ELEMENTS, value);
}

inline  ::int32_t BasePileup::Reader::getNumBases() const {
  return _reader.getDataField< ::int32_t>(
      1 * ::capnp::ELEMENTS);
}

inline  ::int32_t BasePileup::Builder::getNumBases() {
  return _builder.getDataField< ::int32_t>(
      1 * ::capnp::ELEMENTS);
}
inline void BasePileup::Builder::setNumBases( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      1 * ::capnp::ELEMENTS, value);
}

inline bool BasePileup::Reader::hasBases() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool BasePileup::Builder::hasBases() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader BasePileup::Reader::getBases() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder BasePileup::Builder::getBases() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void BasePileup::Builder::setBases( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder BasePileup::Builder::initBases(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void BasePileup::Builder::adoptBases(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> BasePileup::Builder::disownBases() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool BasePileup::Reader::hasQualities() const {
  return !_reader.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline bool BasePileup::Builder::hasQualities() {
  return !_builder.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Data::Reader BasePileup::Reader::getQualities() const {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(
      _reader.getPointerField(1 * ::capnp::POINTERS));
}
inline  ::capnp::Data::Builder BasePileup::Builder::getQualities() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
inline void BasePileup::Builder::setQualities( ::capnp::Data::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), value);
}
inline  ::capnp::Data::Builder BasePileup::Builder::initQualities(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::init(
      _builder.getPointerField(1 * ::capnp::POINTERS), size);
}
inline void BasePileup::Builder::adoptQualities(
    ::capnp::Orphan< ::capnp::Data>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::adopt(
      _builder.getPointerField(1 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Data> BasePileup::Builder::disownQualities() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::disown(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}

inline  ::uint64_t NodePileup::Reader::getNodeId() const {
  return _reader.getDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS);
}

inline  ::uint64_t NodePileup::Builder::getNodeId() {
  return _builder.getDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS);
}
inline void NodePileup::Builder::setNodeId( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS, value);
}

inline bool NodePileup::Reader::hasBasePileups() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool NodePileup::Builder::hasBasePileups() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::BasePileup>::Reader NodePileup::Reader::getBasePileups() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::BasePileup>>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::BasePileup>::Builder NodePileup::Builder::getBasePileups() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::BasePileup>>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void NodePileup::Builder::setBasePileups( ::capnp::List< ::BasePileup>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::BasePileup>>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::BasePileup>::Builder NodePileup::Builder::initBasePileups(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::BasePileup>>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void NodePileup::Builder::adoptBasePileups(
    ::capnp::Orphan< ::capnp::List< ::BasePileup>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::BasePileup>>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::BasePileup>> NodePileup::Builder::disownBasePileups() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::BasePileup>>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}


#endif  // CAPNP_INCLUDED_ec1eb48f4f0a275d_
