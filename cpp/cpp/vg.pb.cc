// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: vg.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "vg.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace vg {

namespace {

const ::google::protobuf::Descriptor* Graph_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Graph_reflection_ = NULL;
const ::google::protobuf::Descriptor* Node_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Node_reflection_ = NULL;
const ::google::protobuf::Descriptor* Edge_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Edge_reflection_ = NULL;
const ::google::protobuf::Descriptor* Metadata_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Metadata_reflection_ = NULL;
const ::google::protobuf::Descriptor* Metadata_InfoEntry_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Info_reflection_ = NULL;
const ::google::protobuf::Descriptor* Edit_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Edit_reflection_ = NULL;
const ::google::protobuf::Descriptor* Mapping_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Mapping_reflection_ = NULL;
const ::google::protobuf::Descriptor* Position_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Position_reflection_ = NULL;
const ::google::protobuf::Descriptor* Path_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Path_reflection_ = NULL;
const ::google::protobuf::Descriptor* Alignment_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Alignment_reflection_ = NULL;
const ::google::protobuf::Descriptor* Fragment_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Fragment_reflection_ = NULL;
const ::google::protobuf::Descriptor* KmerMatch_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  KmerMatch_reflection_ = NULL;
const ::google::protobuf::Descriptor* BasePileup_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BasePileup_reflection_ = NULL;
const ::google::protobuf::Descriptor* NodePileup_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NodePileup_reflection_ = NULL;
const ::google::protobuf::Descriptor* Genotype_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Genotype_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_vg_2eproto() {
  protobuf_AddDesc_vg_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "vg.proto");
  GOOGLE_CHECK(file != NULL);
  Graph_descriptor_ = file->message_type(0);
  static const int Graph_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Graph, node_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Graph, edge_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Graph, path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Graph, metadata_),
  };
  Graph_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Graph_descriptor_,
      Graph::default_instance_,
      Graph_offsets_,
      -1,
      -1,
      -1,
      sizeof(Graph),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Graph, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Graph, _is_default_instance_));
  Node_descriptor_ = file->message_type(1);
  static const int Node_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Node, sequence_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Node, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Node, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Node, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Node, metadata_),
  };
  Node_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Node_descriptor_,
      Node::default_instance_,
      Node_offsets_,
      -1,
      -1,
      -1,
      sizeof(Node),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Node, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Node, _is_default_instance_));
  Edge_descriptor_ = file->message_type(2);
  static const int Edge_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Edge, from_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Edge, to_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Edge, from_start_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Edge, to_end_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Edge, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Edge, metadata_),
  };
  Edge_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Edge_descriptor_,
      Edge::default_instance_,
      Edge_offsets_,
      -1,
      -1,
      -1,
      sizeof(Edge),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Edge, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Edge, _is_default_instance_));
  Metadata_descriptor_ = file->message_type(3);
  static const int Metadata_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Metadata, info_),
  };
  Metadata_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Metadata_descriptor_,
      Metadata::default_instance_,
      Metadata_offsets_,
      -1,
      -1,
      -1,
      sizeof(Metadata),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Metadata, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Metadata, _is_default_instance_));
  Metadata_InfoEntry_descriptor_ = Metadata_descriptor_->nested_type(0);
  Info_descriptor_ = file->message_type(4);
  static const int Info_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Info, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Info, str_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Info, int__),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Info, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Info, metadata_),
  };
  Info_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Info_descriptor_,
      Info::default_instance_,
      Info_offsets_,
      -1,
      -1,
      -1,
      sizeof(Info),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Info, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Info, _is_default_instance_));
  Edit_descriptor_ = file->message_type(5);
  static const int Edit_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Edit, from_length_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Edit, to_length_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Edit, sequence_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Edit, metadata_),
  };
  Edit_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Edit_descriptor_,
      Edit::default_instance_,
      Edit_offsets_,
      -1,
      -1,
      -1,
      sizeof(Edit),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Edit, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Edit, _is_default_instance_));
  Mapping_descriptor_ = file->message_type(6);
  static const int Mapping_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mapping, position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mapping, edit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mapping, rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mapping, metadata_),
  };
  Mapping_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Mapping_descriptor_,
      Mapping::default_instance_,
      Mapping_offsets_,
      -1,
      -1,
      -1,
      sizeof(Mapping),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mapping, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mapping, _is_default_instance_));
  Position_descriptor_ = file->message_type(7);
  static const int Position_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Position, node_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Position, offset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Position, metadata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Position, is_reverse_),
  };
  Position_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Position_descriptor_,
      Position::default_instance_,
      Position_offsets_,
      -1,
      -1,
      -1,
      sizeof(Position),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Position, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Position, _is_default_instance_));
  Path_descriptor_ = file->message_type(8);
  static const int Path_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Path, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Path, mapping_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Path, metadata_),
  };
  Path_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Path_descriptor_,
      Path::default_instance_,
      Path_offsets_,
      -1,
      -1,
      -1,
      sizeof(Path),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Path, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Path, _is_default_instance_));
  Alignment_descriptor_ = file->message_type(9);
  static const int Alignment_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Alignment, sequence_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Alignment, path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Alignment, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Alignment, quality_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Alignment, mapping_quality_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Alignment, score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Alignment, query_position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Alignment, sample_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Alignment, read_group_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Alignment, fragment_prev_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Alignment, fragment_next_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Alignment, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Alignment, metadata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Alignment, is_secondary_),
  };
  Alignment_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Alignment_descriptor_,
      Alignment::default_instance_,
      Alignment_offsets_,
      -1,
      -1,
      -1,
      sizeof(Alignment),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Alignment, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Alignment, _is_default_instance_));
  Fragment_descriptor_ = file->message_type(10);
  static const int Fragment_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fragment, alignment_),
  };
  Fragment_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Fragment_descriptor_,
      Fragment::default_instance_,
      Fragment_offsets_,
      -1,
      -1,
      -1,
      sizeof(Fragment),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fragment, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fragment, _is_default_instance_));
  KmerMatch_descriptor_ = file->message_type(11);
  static const int KmerMatch_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KmerMatch, sequence_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KmerMatch, node_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KmerMatch, position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KmerMatch, backward_),
  };
  KmerMatch_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      KmerMatch_descriptor_,
      KmerMatch::default_instance_,
      KmerMatch_offsets_,
      -1,
      -1,
      -1,
      sizeof(KmerMatch),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KmerMatch, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KmerMatch, _is_default_instance_));
  BasePileup_descriptor_ = file->message_type(12);
  static const int BasePileup_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BasePileup, ref_base_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BasePileup, num_bases_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BasePileup, bases_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BasePileup, qualities_),
  };
  BasePileup_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BasePileup_descriptor_,
      BasePileup::default_instance_,
      BasePileup_offsets_,
      -1,
      -1,
      -1,
      sizeof(BasePileup),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BasePileup, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BasePileup, _is_default_instance_));
  NodePileup_descriptor_ = file->message_type(13);
  static const int NodePileup_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodePileup, node_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodePileup, base_pileup_),
  };
  NodePileup_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      NodePileup_descriptor_,
      NodePileup::default_instance_,
      NodePileup_offsets_,
      -1,
      -1,
      -1,
      sizeof(NodePileup),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodePileup, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodePileup, _is_default_instance_));
  Genotype_descriptor_ = file->message_type(14);
  static const int Genotype_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Genotype, allele_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Genotype, start_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Genotype, end_),
  };
  Genotype_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Genotype_descriptor_,
      Genotype::default_instance_,
      Genotype_offsets_,
      -1,
      -1,
      -1,
      sizeof(Genotype),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Genotype, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Genotype, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_vg_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Graph_descriptor_, &Graph::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Node_descriptor_, &Node::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Edge_descriptor_, &Edge::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Metadata_descriptor_, &Metadata::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        Metadata_InfoEntry_descriptor_,
        ::google::protobuf::internal::MapEntry<
            ::std::string,
            ::vg::Info,
            ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
            ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
            0>::CreateDefaultInstance(
                Metadata_InfoEntry_descriptor_));
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Info_descriptor_, &Info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Edit_descriptor_, &Edit::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Mapping_descriptor_, &Mapping::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Position_descriptor_, &Position::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Path_descriptor_, &Path::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Alignment_descriptor_, &Alignment::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Fragment_descriptor_, &Fragment::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      KmerMatch_descriptor_, &KmerMatch::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BasePileup_descriptor_, &BasePileup::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      NodePileup_descriptor_, &NodePileup::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Genotype_descriptor_, &Genotype::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_vg_2eproto() {
  delete Graph::default_instance_;
  delete Graph_reflection_;
  delete Node::default_instance_;
  delete Node_reflection_;
  delete Edge::default_instance_;
  delete Edge_reflection_;
  delete Metadata::default_instance_;
  delete Metadata_reflection_;
  delete Info::default_instance_;
  delete Info_reflection_;
  delete Edit::default_instance_;
  delete Edit_reflection_;
  delete Mapping::default_instance_;
  delete Mapping_reflection_;
  delete Position::default_instance_;
  delete Position_reflection_;
  delete Path::default_instance_;
  delete Path_reflection_;
  delete Alignment::default_instance_;
  delete Alignment_reflection_;
  delete Fragment::default_instance_;
  delete Fragment_reflection_;
  delete KmerMatch::default_instance_;
  delete KmerMatch_reflection_;
  delete BasePileup::default_instance_;
  delete BasePileup_reflection_;
  delete NodePileup::default_instance_;
  delete NodePileup_reflection_;
  delete Genotype::default_instance_;
  delete Genotype_reflection_;
}

void protobuf_AddDesc_vg_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\010vg.proto\022\002vg\"o\n\005Graph\022\026\n\004node\030\001 \003(\0132\010."
    "vg.Node\022\026\n\004edge\030\002 \003(\0132\010.vg.Edge\022\026\n\004path\030"
    "\003 \003(\0132\010.vg.Path\022\036\n\010metadata\030\004 \001(\0132\014.vg.M"
    "etadata\"`\n\004Node\022\020\n\010sequence\030\001 \001(\t\022\014\n\004nam"
    "e\030\002 \001(\t\022\n\n\002id\030\003 \001(\003\022\014\n\004data\030\004 \001(\014\022\036\n\010met"
    "adata\030\005 \001(\0132\014.vg.Metadata\"r\n\004Edge\022\014\n\004fro"
    "m\030\001 \001(\003\022\n\n\002to\030\002 \001(\003\022\022\n\nfrom_start\030\003 \001(\010\022"
    "\016\n\006to_end\030\004 \001(\010\022\014\n\004data\030\005 \001(\014\022\036\n\010metadat"
    "a\030\006 \001(\0132\014.vg.Metadata\"g\n\010Metadata\022$\n\004inf"
    "o\030\001 \003(\0132\026.vg.Metadata.InfoEntry\0325\n\tInfoE"
    "ntry\022\013\n\003key\030\001 \001(\t\022\027\n\005value\030\002 \001(\0132\010.vg.In"
    "fo:\0028\001\"Z\n\004Info\022\n\n\002id\030\001 \001(\t\022\013\n\003str\030\002 \001(\t\022"
    "\013\n\003int\030\003 \001(\003\022\014\n\004data\030\004 \001(\014\022\036\n\010metadata\030\005"
    " \001(\0132\014.vg.Metadata\"`\n\004Edit\022\023\n\013from_lengt"
    "h\030\001 \001(\005\022\021\n\tto_length\030\002 \001(\005\022\020\n\010sequence\030\003"
    " \001(\t\022\036\n\010metadata\030\004 \001(\0132\014.vg.Metadata\"o\n\007"
    "Mapping\022\036\n\010position\030\001 \001(\0132\014.vg.Position\022"
    "\026\n\004edit\030\002 \003(\0132\010.vg.Edit\022\014\n\004rank\030\005 \001(\003\022\036\n"
    "\010metadata\030\004 \001(\0132\014.vg.Metadata\"_\n\010Positio"
    "n\022\017\n\007node_id\030\001 \001(\003\022\016\n\006offset\030\002 \001(\003\022\036\n\010me"
    "tadata\030\003 \001(\0132\014.vg.Metadata\022\022\n\nis_reverse"
    "\030\004 \001(\010\"R\n\004Path\022\014\n\004name\030\001 \001(\t\022\034\n\007mapping\030"
    "\002 \003(\0132\013.vg.Mapping\022\036\n\010metadata\030\003 \001(\0132\014.v"
    "g.Metadata\"\315\002\n\tAlignment\022\020\n\010sequence\030\001 \001"
    "(\t\022\026\n\004path\030\002 \001(\0132\010.vg.Path\022\014\n\004name\030\003 \001(\t"
    "\022\017\n\007quality\030\004 \001(\014\022\027\n\017mapping_quality\030\005 \001"
    "(\005\022\r\n\005score\030\006 \001(\005\022\026\n\016query_position\030\007 \001("
    "\005\022\023\n\013sample_name\030\t \001(\t\022\022\n\nread_group\030\n \001"
    "(\t\022$\n\rfragment_prev\030\013 \001(\0132\r.vg.Alignment"
    "\022$\n\rfragment_next\030\014 \001(\0132\r.vg.Alignment\022\014"
    "\n\004data\030\r \001(\014\022\036\n\010metadata\030\016 \001(\0132\014.vg.Meta"
    "data\022\024\n\014is_secondary\030\017 \001(\010\",\n\010Fragment\022 "
    "\n\talignment\030\001 \003(\0132\r.vg.Alignment\"R\n\tKmer"
    "Match\022\020\n\010sequence\030\001 \001(\t\022\017\n\007node_id\030\002 \001(\003"
    "\022\020\n\010position\030\003 \001(\021\022\020\n\010backward\030\004 \001(\010\"S\n\n"
    "BasePileup\022\020\n\010ref_base\030\001 \001(\005\022\021\n\tnum_base"
    "s\030\002 \001(\005\022\r\n\005bases\030\003 \001(\t\022\021\n\tqualities\030\004 \001("
    "\014\"B\n\nNodePileup\022\017\n\007node_id\030\001 \001(\003\022#\n\013base"
    "_pileup\030\002 \003(\0132\016.vg.BasePileup\"\\\n\010Genotyp"
    "e\022\030\n\006allele\030\001 \003(\0132\010.vg.Path\022\033\n\005start\030\002 \001"
    "(\0132\014.vg.Position\022\031\n\003end\030\003 \001(\0132\014.vg.Posit"
    "ionb\006proto3", 1651);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "vg.proto", &protobuf_RegisterTypes);
  Graph::default_instance_ = new Graph();
  Node::default_instance_ = new Node();
  Edge::default_instance_ = new Edge();
  Metadata::default_instance_ = new Metadata();
  Info::default_instance_ = new Info();
  Edit::default_instance_ = new Edit();
  Mapping::default_instance_ = new Mapping();
  Position::default_instance_ = new Position();
  Path::default_instance_ = new Path();
  Alignment::default_instance_ = new Alignment();
  Fragment::default_instance_ = new Fragment();
  KmerMatch::default_instance_ = new KmerMatch();
  BasePileup::default_instance_ = new BasePileup();
  NodePileup::default_instance_ = new NodePileup();
  Genotype::default_instance_ = new Genotype();
  Graph::default_instance_->InitAsDefaultInstance();
  Node::default_instance_->InitAsDefaultInstance();
  Edge::default_instance_->InitAsDefaultInstance();
  Metadata::default_instance_->InitAsDefaultInstance();
  Info::default_instance_->InitAsDefaultInstance();
  Edit::default_instance_->InitAsDefaultInstance();
  Mapping::default_instance_->InitAsDefaultInstance();
  Position::default_instance_->InitAsDefaultInstance();
  Path::default_instance_->InitAsDefaultInstance();
  Alignment::default_instance_->InitAsDefaultInstance();
  Fragment::default_instance_->InitAsDefaultInstance();
  KmerMatch::default_instance_->InitAsDefaultInstance();
  BasePileup::default_instance_->InitAsDefaultInstance();
  NodePileup::default_instance_->InitAsDefaultInstance();
  Genotype::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_vg_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_vg_2eproto {
  StaticDescriptorInitializer_vg_2eproto() {
    protobuf_AddDesc_vg_2eproto();
  }
} static_descriptor_initializer_vg_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Graph::kNodeFieldNumber;
const int Graph::kEdgeFieldNumber;
const int Graph::kPathFieldNumber;
const int Graph::kMetadataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Graph::Graph()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vg.Graph)
}

void Graph::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  metadata_ = const_cast< ::vg::Metadata*>(&::vg::Metadata::default_instance());
}

Graph::Graph(const Graph& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:vg.Graph)
}

void Graph::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  metadata_ = NULL;
}

Graph::~Graph() {
  // @@protoc_insertion_point(destructor:vg.Graph)
  SharedDtor();
}

void Graph::SharedDtor() {
  if (this != default_instance_) {
    delete metadata_;
  }
}

void Graph::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Graph::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Graph_descriptor_;
}

const Graph& Graph::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vg_2eproto();
  return *default_instance_;
}

Graph* Graph::default_instance_ = NULL;

Graph* Graph::New(::google::protobuf::Arena* arena) const {
  Graph* n = new Graph;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Graph::Clear() {
  if (GetArenaNoVirtual() == NULL && metadata_ != NULL) delete metadata_;
  metadata_ = NULL;
  node_.Clear();
  edge_.Clear();
  path_.Clear();
}

bool Graph::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vg.Graph)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .vg.Node node = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_node:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_node()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_node;
        if (input->ExpectTag(18)) goto parse_loop_edge;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .vg.Edge edge = 2;
      case 2: {
        if (tag == 18) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_edge:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_edge()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_edge;
        if (input->ExpectTag(26)) goto parse_loop_path;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .vg.Path path = 3;
      case 3: {
        if (tag == 26) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_path()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_path;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(34)) goto parse_metadata;
        break;
      }

      // optional .vg.Metadata metadata = 4;
      case 4: {
        if (tag == 34) {
         parse_metadata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_metadata()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vg.Graph)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vg.Graph)
  return false;
#undef DO_
}

void Graph::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vg.Graph)
  // repeated .vg.Node node = 1;
  for (unsigned int i = 0, n = this->node_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->node(i), output);
  }

  // repeated .vg.Edge edge = 2;
  for (unsigned int i = 0, n = this->edge_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->edge(i), output);
  }

  // repeated .vg.Path path = 3;
  for (unsigned int i = 0, n = this->path_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->path(i), output);
  }

  // optional .vg.Metadata metadata = 4;
  if (this->has_metadata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->metadata_, output);
  }

  // @@protoc_insertion_point(serialize_end:vg.Graph)
}

::google::protobuf::uint8* Graph::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:vg.Graph)
  // repeated .vg.Node node = 1;
  for (unsigned int i = 0, n = this->node_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->node(i), target);
  }

  // repeated .vg.Edge edge = 2;
  for (unsigned int i = 0, n = this->edge_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->edge(i), target);
  }

  // repeated .vg.Path path = 3;
  for (unsigned int i = 0, n = this->path_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->path(i), target);
  }

  // optional .vg.Metadata metadata = 4;
  if (this->has_metadata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, *this->metadata_, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:vg.Graph)
  return target;
}

int Graph::ByteSize() const {
  int total_size = 0;

  // optional .vg.Metadata metadata = 4;
  if (this->has_metadata()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->metadata_);
  }

  // repeated .vg.Node node = 1;
  total_size += 1 * this->node_size();
  for (int i = 0; i < this->node_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->node(i));
  }

  // repeated .vg.Edge edge = 2;
  total_size += 1 * this->edge_size();
  for (int i = 0; i < this->edge_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->edge(i));
  }

  // repeated .vg.Path path = 3;
  total_size += 1 * this->path_size();
  for (int i = 0; i < this->path_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->path(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Graph::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Graph* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Graph>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Graph::MergeFrom(const Graph& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  node_.MergeFrom(from.node_);
  edge_.MergeFrom(from.edge_);
  path_.MergeFrom(from.path_);
  if (from.has_metadata()) {
    mutable_metadata()->::vg::Metadata::MergeFrom(from.metadata());
  }
}

void Graph::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Graph::CopyFrom(const Graph& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Graph::IsInitialized() const {

  return true;
}

void Graph::Swap(Graph* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Graph::InternalSwap(Graph* other) {
  node_.UnsafeArenaSwap(&other->node_);
  edge_.UnsafeArenaSwap(&other->edge_);
  path_.UnsafeArenaSwap(&other->path_);
  std::swap(metadata_, other->metadata_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Graph::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Graph_descriptor_;
  metadata.reflection = Graph_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Graph

// repeated .vg.Node node = 1;
int Graph::node_size() const {
  return node_.size();
}
void Graph::clear_node() {
  node_.Clear();
}
const ::vg::Node& Graph::node(int index) const {
  // @@protoc_insertion_point(field_get:vg.Graph.node)
  return node_.Get(index);
}
::vg::Node* Graph::mutable_node(int index) {
  // @@protoc_insertion_point(field_mutable:vg.Graph.node)
  return node_.Mutable(index);
}
::vg::Node* Graph::add_node() {
  // @@protoc_insertion_point(field_add:vg.Graph.node)
  return node_.Add();
}
::google::protobuf::RepeatedPtrField< ::vg::Node >*
Graph::mutable_node() {
  // @@protoc_insertion_point(field_mutable_list:vg.Graph.node)
  return &node_;
}
const ::google::protobuf::RepeatedPtrField< ::vg::Node >&
Graph::node() const {
  // @@protoc_insertion_point(field_list:vg.Graph.node)
  return node_;
}

// repeated .vg.Edge edge = 2;
int Graph::edge_size() const {
  return edge_.size();
}
void Graph::clear_edge() {
  edge_.Clear();
}
const ::vg::Edge& Graph::edge(int index) const {
  // @@protoc_insertion_point(field_get:vg.Graph.edge)
  return edge_.Get(index);
}
::vg::Edge* Graph::mutable_edge(int index) {
  // @@protoc_insertion_point(field_mutable:vg.Graph.edge)
  return edge_.Mutable(index);
}
::vg::Edge* Graph::add_edge() {
  // @@protoc_insertion_point(field_add:vg.Graph.edge)
  return edge_.Add();
}
::google::protobuf::RepeatedPtrField< ::vg::Edge >*
Graph::mutable_edge() {
  // @@protoc_insertion_point(field_mutable_list:vg.Graph.edge)
  return &edge_;
}
const ::google::protobuf::RepeatedPtrField< ::vg::Edge >&
Graph::edge() const {
  // @@protoc_insertion_point(field_list:vg.Graph.edge)
  return edge_;
}

// repeated .vg.Path path = 3;
int Graph::path_size() const {
  return path_.size();
}
void Graph::clear_path() {
  path_.Clear();
}
const ::vg::Path& Graph::path(int index) const {
  // @@protoc_insertion_point(field_get:vg.Graph.path)
  return path_.Get(index);
}
::vg::Path* Graph::mutable_path(int index) {
  // @@protoc_insertion_point(field_mutable:vg.Graph.path)
  return path_.Mutable(index);
}
::vg::Path* Graph::add_path() {
  // @@protoc_insertion_point(field_add:vg.Graph.path)
  return path_.Add();
}
::google::protobuf::RepeatedPtrField< ::vg::Path >*
Graph::mutable_path() {
  // @@protoc_insertion_point(field_mutable_list:vg.Graph.path)
  return &path_;
}
const ::google::protobuf::RepeatedPtrField< ::vg::Path >&
Graph::path() const {
  // @@protoc_insertion_point(field_list:vg.Graph.path)
  return path_;
}

// optional .vg.Metadata metadata = 4;
bool Graph::has_metadata() const {
  return !_is_default_instance_ && metadata_ != NULL;
}
void Graph::clear_metadata() {
  if (GetArenaNoVirtual() == NULL && metadata_ != NULL) delete metadata_;
  metadata_ = NULL;
}
const ::vg::Metadata& Graph::metadata() const {
  // @@protoc_insertion_point(field_get:vg.Graph.metadata)
  return metadata_ != NULL ? *metadata_ : *default_instance_->metadata_;
}
::vg::Metadata* Graph::mutable_metadata() {
  
  if (metadata_ == NULL) {
    metadata_ = new ::vg::Metadata;
  }
  // @@protoc_insertion_point(field_mutable:vg.Graph.metadata)
  return metadata_;
}
::vg::Metadata* Graph::release_metadata() {
  
  ::vg::Metadata* temp = metadata_;
  metadata_ = NULL;
  return temp;
}
void Graph::set_allocated_metadata(::vg::Metadata* metadata) {
  delete metadata_;
  metadata_ = metadata;
  if (metadata) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:vg.Graph.metadata)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Node::kSequenceFieldNumber;
const int Node::kNameFieldNumber;
const int Node::kIdFieldNumber;
const int Node::kDataFieldNumber;
const int Node::kMetadataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Node::Node()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vg.Node)
}

void Node::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  metadata_ = const_cast< ::vg::Metadata*>(&::vg::Metadata::default_instance());
}

Node::Node(const Node& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:vg.Node)
}

void Node::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  sequence_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_ = GOOGLE_LONGLONG(0);
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  metadata_ = NULL;
}

Node::~Node() {
  // @@protoc_insertion_point(destructor:vg.Node)
  SharedDtor();
}

void Node::SharedDtor() {
  sequence_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete metadata_;
  }
}

void Node::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Node::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Node_descriptor_;
}

const Node& Node::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vg_2eproto();
  return *default_instance_;
}

Node* Node::default_instance_ = NULL;

Node* Node::New(::google::protobuf::Arena* arena) const {
  Node* n = new Node;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Node::Clear() {
  sequence_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_ = GOOGLE_LONGLONG(0);
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && metadata_ != NULL) delete metadata_;
  metadata_ = NULL;
}

bool Node::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vg.Node)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string sequence = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sequence()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->sequence().data(), this->sequence().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "vg.Node.sequence"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "vg.Node.name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_id;
        break;
      }

      // optional int64 id = 3;
      case 3: {
        if (tag == 24) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_data;
        break;
      }

      // optional bytes data = 4;
      case 4: {
        if (tag == 34) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_metadata;
        break;
      }

      // optional .vg.Metadata metadata = 5;
      case 5: {
        if (tag == 42) {
         parse_metadata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_metadata()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vg.Node)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vg.Node)
  return false;
#undef DO_
}

void Node::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vg.Node)
  // optional string sequence = 1;
  if (this->sequence().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sequence().data(), this->sequence().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vg.Node.sequence");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->sequence(), output);
  }

  // optional string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vg.Node.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // optional int64 id = 3;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->id(), output);
  }

  // optional bytes data = 4;
  if (this->data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->data(), output);
  }

  // optional .vg.Metadata metadata = 5;
  if (this->has_metadata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->metadata_, output);
  }

  // @@protoc_insertion_point(serialize_end:vg.Node)
}

::google::protobuf::uint8* Node::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:vg.Node)
  // optional string sequence = 1;
  if (this->sequence().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sequence().data(), this->sequence().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vg.Node.sequence");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->sequence(), target);
  }

  // optional string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vg.Node.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional int64 id = 3;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->id(), target);
  }

  // optional bytes data = 4;
  if (this->data().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->data(), target);
  }

  // optional .vg.Metadata metadata = 5;
  if (this->has_metadata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, *this->metadata_, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:vg.Node)
  return target;
}

int Node::ByteSize() const {
  int total_size = 0;

  // optional string sequence = 1;
  if (this->sequence().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sequence());
  }

  // optional string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // optional int64 id = 3;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->id());
  }

  // optional bytes data = 4;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->data());
  }

  // optional .vg.Metadata metadata = 5;
  if (this->has_metadata()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->metadata_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Node::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Node* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Node>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Node::MergeFrom(const Node& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.sequence().size() > 0) {

    sequence_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sequence_);
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.data().size() > 0) {

    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  if (from.has_metadata()) {
    mutable_metadata()->::vg::Metadata::MergeFrom(from.metadata());
  }
}

void Node::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Node::CopyFrom(const Node& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Node::IsInitialized() const {

  return true;
}

void Node::Swap(Node* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Node::InternalSwap(Node* other) {
  sequence_.Swap(&other->sequence_);
  name_.Swap(&other->name_);
  std::swap(id_, other->id_);
  data_.Swap(&other->data_);
  std::swap(metadata_, other->metadata_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Node::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Node_descriptor_;
  metadata.reflection = Node_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Node

// optional string sequence = 1;
void Node::clear_sequence() {
  sequence_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Node::sequence() const {
  // @@protoc_insertion_point(field_get:vg.Node.sequence)
  return sequence_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Node::set_sequence(const ::std::string& value) {
  
  sequence_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:vg.Node.sequence)
}
 void Node::set_sequence(const char* value) {
  
  sequence_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:vg.Node.sequence)
}
 void Node::set_sequence(const char* value, size_t size) {
  
  sequence_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:vg.Node.sequence)
}
 ::std::string* Node::mutable_sequence() {
  
  // @@protoc_insertion_point(field_mutable:vg.Node.sequence)
  return sequence_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Node::release_sequence() {
  
  return sequence_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Node::set_allocated_sequence(::std::string* sequence) {
  if (sequence != NULL) {
    
  } else {
    
  }
  sequence_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sequence);
  // @@protoc_insertion_point(field_set_allocated:vg.Node.sequence)
}

// optional string name = 2;
void Node::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Node::name() const {
  // @@protoc_insertion_point(field_get:vg.Node.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Node::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:vg.Node.name)
}
 void Node::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:vg.Node.name)
}
 void Node::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:vg.Node.name)
}
 ::std::string* Node::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:vg.Node.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Node::release_name() {
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Node::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:vg.Node.name)
}

// optional int64 id = 3;
void Node::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 Node::id() const {
  // @@protoc_insertion_point(field_get:vg.Node.id)
  return id_;
}
 void Node::set_id(::google::protobuf::int64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:vg.Node.id)
}

// optional bytes data = 4;
void Node::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Node::data() const {
  // @@protoc_insertion_point(field_get:vg.Node.data)
  return data_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Node::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:vg.Node.data)
}
 void Node::set_data(const char* value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:vg.Node.data)
}
 void Node::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:vg.Node.data)
}
 ::std::string* Node::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:vg.Node.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Node::release_data() {
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Node::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:vg.Node.data)
}

// optional .vg.Metadata metadata = 5;
bool Node::has_metadata() const {
  return !_is_default_instance_ && metadata_ != NULL;
}
void Node::clear_metadata() {
  if (GetArenaNoVirtual() == NULL && metadata_ != NULL) delete metadata_;
  metadata_ = NULL;
}
const ::vg::Metadata& Node::metadata() const {
  // @@protoc_insertion_point(field_get:vg.Node.metadata)
  return metadata_ != NULL ? *metadata_ : *default_instance_->metadata_;
}
::vg::Metadata* Node::mutable_metadata() {
  
  if (metadata_ == NULL) {
    metadata_ = new ::vg::Metadata;
  }
  // @@protoc_insertion_point(field_mutable:vg.Node.metadata)
  return metadata_;
}
::vg::Metadata* Node::release_metadata() {
  
  ::vg::Metadata* temp = metadata_;
  metadata_ = NULL;
  return temp;
}
void Node::set_allocated_metadata(::vg::Metadata* metadata) {
  delete metadata_;
  metadata_ = metadata;
  if (metadata) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:vg.Node.metadata)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Edge::kFromFieldNumber;
const int Edge::kToFieldNumber;
const int Edge::kFromStartFieldNumber;
const int Edge::kToEndFieldNumber;
const int Edge::kDataFieldNumber;
const int Edge::kMetadataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Edge::Edge()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vg.Edge)
}

void Edge::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  metadata_ = const_cast< ::vg::Metadata*>(&::vg::Metadata::default_instance());
}

Edge::Edge(const Edge& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:vg.Edge)
}

void Edge::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  from_ = GOOGLE_LONGLONG(0);
  to_ = GOOGLE_LONGLONG(0);
  from_start_ = false;
  to_end_ = false;
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  metadata_ = NULL;
}

Edge::~Edge() {
  // @@protoc_insertion_point(destructor:vg.Edge)
  SharedDtor();
}

void Edge::SharedDtor() {
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete metadata_;
  }
}

void Edge::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Edge::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Edge_descriptor_;
}

const Edge& Edge::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vg_2eproto();
  return *default_instance_;
}

Edge* Edge::default_instance_ = NULL;

Edge* Edge::New(::google::protobuf::Arena* arena) const {
  Edge* n = new Edge;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Edge::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Edge*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(from_, to_);
  ZR_(from_start_, to_end_);
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && metadata_ != NULL) delete metadata_;
  metadata_ = NULL;

#undef ZR_HELPER_
#undef ZR_

}

bool Edge::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vg.Edge)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 from = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &from_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_to;
        break;
      }

      // optional int64 to = 2;
      case 2: {
        if (tag == 16) {
         parse_to:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &to_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_from_start;
        break;
      }

      // optional bool from_start = 3;
      case 3: {
        if (tag == 24) {
         parse_from_start:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &from_start_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_to_end;
        break;
      }

      // optional bool to_end = 4;
      case 4: {
        if (tag == 32) {
         parse_to_end:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &to_end_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_data;
        break;
      }

      // optional bytes data = 5;
      case 5: {
        if (tag == 42) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_metadata;
        break;
      }

      // optional .vg.Metadata metadata = 6;
      case 6: {
        if (tag == 50) {
         parse_metadata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_metadata()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vg.Edge)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vg.Edge)
  return false;
#undef DO_
}

void Edge::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vg.Edge)
  // optional int64 from = 1;
  if (this->from() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->from(), output);
  }

  // optional int64 to = 2;
  if (this->to() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->to(), output);
  }

  // optional bool from_start = 3;
  if (this->from_start() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->from_start(), output);
  }

  // optional bool to_end = 4;
  if (this->to_end() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->to_end(), output);
  }

  // optional bytes data = 5;
  if (this->data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->data(), output);
  }

  // optional .vg.Metadata metadata = 6;
  if (this->has_metadata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->metadata_, output);
  }

  // @@protoc_insertion_point(serialize_end:vg.Edge)
}

::google::protobuf::uint8* Edge::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:vg.Edge)
  // optional int64 from = 1;
  if (this->from() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->from(), target);
  }

  // optional int64 to = 2;
  if (this->to() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->to(), target);
  }

  // optional bool from_start = 3;
  if (this->from_start() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->from_start(), target);
  }

  // optional bool to_end = 4;
  if (this->to_end() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->to_end(), target);
  }

  // optional bytes data = 5;
  if (this->data().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->data(), target);
  }

  // optional .vg.Metadata metadata = 6;
  if (this->has_metadata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, *this->metadata_, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:vg.Edge)
  return target;
}

int Edge::ByteSize() const {
  int total_size = 0;

  // optional int64 from = 1;
  if (this->from() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->from());
  }

  // optional int64 to = 2;
  if (this->to() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->to());
  }

  // optional bool from_start = 3;
  if (this->from_start() != 0) {
    total_size += 1 + 1;
  }

  // optional bool to_end = 4;
  if (this->to_end() != 0) {
    total_size += 1 + 1;
  }

  // optional bytes data = 5;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->data());
  }

  // optional .vg.Metadata metadata = 6;
  if (this->has_metadata()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->metadata_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Edge::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Edge* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Edge>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Edge::MergeFrom(const Edge& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.from() != 0) {
    set_from(from.from());
  }
  if (from.to() != 0) {
    set_to(from.to());
  }
  if (from.from_start() != 0) {
    set_from_start(from.from_start());
  }
  if (from.to_end() != 0) {
    set_to_end(from.to_end());
  }
  if (from.data().size() > 0) {

    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  if (from.has_metadata()) {
    mutable_metadata()->::vg::Metadata::MergeFrom(from.metadata());
  }
}

void Edge::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Edge::CopyFrom(const Edge& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Edge::IsInitialized() const {

  return true;
}

void Edge::Swap(Edge* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Edge::InternalSwap(Edge* other) {
  std::swap(from_, other->from_);
  std::swap(to_, other->to_);
  std::swap(from_start_, other->from_start_);
  std::swap(to_end_, other->to_end_);
  data_.Swap(&other->data_);
  std::swap(metadata_, other->metadata_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Edge::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Edge_descriptor_;
  metadata.reflection = Edge_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Edge

// optional int64 from = 1;
void Edge::clear_from() {
  from_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 Edge::from() const {
  // @@protoc_insertion_point(field_get:vg.Edge.from)
  return from_;
}
 void Edge::set_from(::google::protobuf::int64 value) {
  
  from_ = value;
  // @@protoc_insertion_point(field_set:vg.Edge.from)
}

// optional int64 to = 2;
void Edge::clear_to() {
  to_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 Edge::to() const {
  // @@protoc_insertion_point(field_get:vg.Edge.to)
  return to_;
}
 void Edge::set_to(::google::protobuf::int64 value) {
  
  to_ = value;
  // @@protoc_insertion_point(field_set:vg.Edge.to)
}

// optional bool from_start = 3;
void Edge::clear_from_start() {
  from_start_ = false;
}
 bool Edge::from_start() const {
  // @@protoc_insertion_point(field_get:vg.Edge.from_start)
  return from_start_;
}
 void Edge::set_from_start(bool value) {
  
  from_start_ = value;
  // @@protoc_insertion_point(field_set:vg.Edge.from_start)
}

// optional bool to_end = 4;
void Edge::clear_to_end() {
  to_end_ = false;
}
 bool Edge::to_end() const {
  // @@protoc_insertion_point(field_get:vg.Edge.to_end)
  return to_end_;
}
 void Edge::set_to_end(bool value) {
  
  to_end_ = value;
  // @@protoc_insertion_point(field_set:vg.Edge.to_end)
}

// optional bytes data = 5;
void Edge::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Edge::data() const {
  // @@protoc_insertion_point(field_get:vg.Edge.data)
  return data_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Edge::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:vg.Edge.data)
}
 void Edge::set_data(const char* value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:vg.Edge.data)
}
 void Edge::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:vg.Edge.data)
}
 ::std::string* Edge::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:vg.Edge.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Edge::release_data() {
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Edge::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:vg.Edge.data)
}

// optional .vg.Metadata metadata = 6;
bool Edge::has_metadata() const {
  return !_is_default_instance_ && metadata_ != NULL;
}
void Edge::clear_metadata() {
  if (GetArenaNoVirtual() == NULL && metadata_ != NULL) delete metadata_;
  metadata_ = NULL;
}
const ::vg::Metadata& Edge::metadata() const {
  // @@protoc_insertion_point(field_get:vg.Edge.metadata)
  return metadata_ != NULL ? *metadata_ : *default_instance_->metadata_;
}
::vg::Metadata* Edge::mutable_metadata() {
  
  if (metadata_ == NULL) {
    metadata_ = new ::vg::Metadata;
  }
  // @@protoc_insertion_point(field_mutable:vg.Edge.metadata)
  return metadata_;
}
::vg::Metadata* Edge::release_metadata() {
  
  ::vg::Metadata* temp = metadata_;
  metadata_ = NULL;
  return temp;
}
void Edge::set_allocated_metadata(::vg::Metadata* metadata) {
  delete metadata_;
  metadata_ = metadata;
  if (metadata) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:vg.Edge.metadata)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Metadata::kInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Metadata::Metadata()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vg.Metadata)
}

void Metadata::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Metadata::Metadata(const Metadata& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:vg.Metadata)
}

void Metadata::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  info_.SetAssignDescriptorCallback(
      protobuf_AssignDescriptorsOnce);
  info_.SetEntryDescriptor(
      &::vg::Metadata_InfoEntry_descriptor_);
}

Metadata::~Metadata() {
  // @@protoc_insertion_point(destructor:vg.Metadata)
  SharedDtor();
}

void Metadata::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Metadata::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Metadata::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Metadata_descriptor_;
}

const Metadata& Metadata::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vg_2eproto();
  return *default_instance_;
}

Metadata* Metadata::default_instance_ = NULL;

Metadata* Metadata::New(::google::protobuf::Arena* arena) const {
  Metadata* n = new Metadata;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Metadata::Clear() {
  info_.Clear();
}

bool Metadata::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vg.Metadata)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // map<string, .vg.Info> info = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_info:
          ::google::protobuf::scoped_ptr<Metadata_InfoEntry> entry(info_.NewEntry());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, entry.get()));
          (*mutable_info())[entry->key()].Swap(entry->mutable_value());
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            entry->key().data(), entry->key().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "vg.Metadata.InfoEntry.key"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_info;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vg.Metadata)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vg.Metadata)
  return false;
#undef DO_
}

void Metadata::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vg.Metadata)
  // map<string, .vg.Info> info = 1;
  {
    ::google::protobuf::scoped_ptr<Metadata_InfoEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::vg::Info >::const_iterator
        it = this->info().begin();
        it != this->info().end(); ++it) {
      entry.reset(info_.NewEntryWrapper(it->first, it->second));
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
          1, *entry, output);
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        it->first.data(), it->first.length(),
        ::google::protobuf::internal::WireFormatLite::SERIALIZE,
        "vg.Metadata.InfoEntry.key");
    }
  }

  // @@protoc_insertion_point(serialize_end:vg.Metadata)
}

::google::protobuf::uint8* Metadata::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:vg.Metadata)
  // map<string, .vg.Info> info = 1;
  {
    ::google::protobuf::scoped_ptr<Metadata_InfoEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::vg::Info >::const_iterator
        it = this->info().begin();
        it != this->info().end(); ++it) {
      entry.reset(info_.NewEntryWrapper(it->first, it->second));
      target = ::google::protobuf::internal::WireFormatLite::
          WriteMessageNoVirtualToArray(
              1, *entry, target);
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        it->first.data(), it->first.length(),
        ::google::protobuf::internal::WireFormatLite::SERIALIZE,
        "vg.Metadata.InfoEntry.key");
    }
  }

  // @@protoc_insertion_point(serialize_to_array_end:vg.Metadata)
  return target;
}

int Metadata::ByteSize() const {
  int total_size = 0;

  // map<string, .vg.Info> info = 1;
  total_size += 1 * this->info_size();
  {
    ::google::protobuf::scoped_ptr<Metadata_InfoEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::vg::Info >::const_iterator
        it = this->info().begin();
        it != this->info().end(); ++it) {
      entry.reset(info_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Metadata::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Metadata* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Metadata>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Metadata::MergeFrom(const Metadata& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  info_.MergeFrom(from.info_);
}

void Metadata::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Metadata::CopyFrom(const Metadata& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Metadata::IsInitialized() const {

  return true;
}

void Metadata::Swap(Metadata* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Metadata::InternalSwap(Metadata* other) {
  info_.Swap(&other->info_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Metadata::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Metadata_descriptor_;
  metadata.reflection = Metadata_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Metadata

// map<string, .vg.Info> info = 1;
int Metadata::info_size() const {
  return info_.size();
}
void Metadata::clear_info() {
  info_.Clear();
}
 const ::google::protobuf::Map< ::std::string, ::vg::Info >&
Metadata::info() const {
  // @@protoc_insertion_point(field_map:vg.Metadata.info)
  return info_.GetMap();
}
 ::google::protobuf::Map< ::std::string, ::vg::Info >*
Metadata::mutable_info() {
  // @@protoc_insertion_point(field_mutable_map:vg.Metadata.info)
  return info_.MutableMap();
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Info::kIdFieldNumber;
const int Info::kStrFieldNumber;
const int Info::kIntFieldNumber;
const int Info::kDataFieldNumber;
const int Info::kMetadataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Info::Info()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vg.Info)
}

void Info::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  metadata_ = const_cast< ::vg::Metadata*>(&::vg::Metadata::default_instance());
}

Info::Info(const Info& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:vg.Info)
}

void Info::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  str_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  int__ = GOOGLE_LONGLONG(0);
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  metadata_ = NULL;
}

Info::~Info() {
  // @@protoc_insertion_point(destructor:vg.Info)
  SharedDtor();
}

void Info::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  str_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete metadata_;
  }
}

void Info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Info_descriptor_;
}

const Info& Info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vg_2eproto();
  return *default_instance_;
}

Info* Info::default_instance_ = NULL;

Info* Info::New(::google::protobuf::Arena* arena) const {
  Info* n = new Info;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Info::Clear() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  str_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  int__ = GOOGLE_LONGLONG(0);
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && metadata_ != NULL) delete metadata_;
  metadata_ = NULL;
}

bool Info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vg.Info)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "vg.Info.id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_str;
        break;
      }

      // optional string str = 2;
      case 2: {
        if (tag == 18) {
         parse_str:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_str()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->str().data(), this->str().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "vg.Info.str"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_int;
        break;
      }

      // optional int64 int = 3;
      case 3: {
        if (tag == 24) {
         parse_int:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &int__)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_data;
        break;
      }

      // optional bytes data = 4;
      case 4: {
        if (tag == 34) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_metadata;
        break;
      }

      // optional .vg.Metadata metadata = 5;
      case 5: {
        if (tag == 42) {
         parse_metadata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_metadata()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vg.Info)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vg.Info)
  return false;
#undef DO_
}

void Info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vg.Info)
  // optional string id = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vg.Info.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // optional string str = 2;
  if (this->str().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->str().data(), this->str().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vg.Info.str");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->str(), output);
  }

  // optional int64 int = 3;
  if (this->int_() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->int_(), output);
  }

  // optional bytes data = 4;
  if (this->data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->data(), output);
  }

  // optional .vg.Metadata metadata = 5;
  if (this->has_metadata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->metadata_, output);
  }

  // @@protoc_insertion_point(serialize_end:vg.Info)
}

::google::protobuf::uint8* Info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:vg.Info)
  // optional string id = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vg.Info.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // optional string str = 2;
  if (this->str().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->str().data(), this->str().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vg.Info.str");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->str(), target);
  }

  // optional int64 int = 3;
  if (this->int_() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->int_(), target);
  }

  // optional bytes data = 4;
  if (this->data().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->data(), target);
  }

  // optional .vg.Metadata metadata = 5;
  if (this->has_metadata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, *this->metadata_, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:vg.Info)
  return target;
}

int Info::ByteSize() const {
  int total_size = 0;

  // optional string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());
  }

  // optional string str = 2;
  if (this->str().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->str());
  }

  // optional int64 int = 3;
  if (this->int_() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->int_());
  }

  // optional bytes data = 4;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->data());
  }

  // optional .vg.Metadata metadata = 5;
  if (this->has_metadata()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->metadata_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Info::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Info* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Info>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Info::MergeFrom(const Info& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.str().size() > 0) {

    str_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.str_);
  }
  if (from.int_() != 0) {
    set_int_(from.int_());
  }
  if (from.data().size() > 0) {

    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  if (from.has_metadata()) {
    mutable_metadata()->::vg::Metadata::MergeFrom(from.metadata());
  }
}

void Info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Info::CopyFrom(const Info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Info::IsInitialized() const {

  return true;
}

void Info::Swap(Info* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Info::InternalSwap(Info* other) {
  id_.Swap(&other->id_);
  str_.Swap(&other->str_);
  std::swap(int__, other->int__);
  data_.Swap(&other->data_);
  std::swap(metadata_, other->metadata_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Info_descriptor_;
  metadata.reflection = Info_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Info

// optional string id = 1;
void Info::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Info::id() const {
  // @@protoc_insertion_point(field_get:vg.Info.id)
  return id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Info::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:vg.Info.id)
}
 void Info::set_id(const char* value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:vg.Info.id)
}
 void Info::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:vg.Info.id)
}
 ::std::string* Info::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:vg.Info.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Info::release_id() {
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Info::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:vg.Info.id)
}

// optional string str = 2;
void Info::clear_str() {
  str_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Info::str() const {
  // @@protoc_insertion_point(field_get:vg.Info.str)
  return str_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Info::set_str(const ::std::string& value) {
  
  str_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:vg.Info.str)
}
 void Info::set_str(const char* value) {
  
  str_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:vg.Info.str)
}
 void Info::set_str(const char* value, size_t size) {
  
  str_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:vg.Info.str)
}
 ::std::string* Info::mutable_str() {
  
  // @@protoc_insertion_point(field_mutable:vg.Info.str)
  return str_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Info::release_str() {
  
  return str_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Info::set_allocated_str(::std::string* str) {
  if (str != NULL) {
    
  } else {
    
  }
  str_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), str);
  // @@protoc_insertion_point(field_set_allocated:vg.Info.str)
}

// optional int64 int = 3;
void Info::clear_int_() {
  int__ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 Info::int_() const {
  // @@protoc_insertion_point(field_get:vg.Info.int)
  return int__;
}
 void Info::set_int_(::google::protobuf::int64 value) {
  
  int__ = value;
  // @@protoc_insertion_point(field_set:vg.Info.int)
}

// optional bytes data = 4;
void Info::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Info::data() const {
  // @@protoc_insertion_point(field_get:vg.Info.data)
  return data_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Info::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:vg.Info.data)
}
 void Info::set_data(const char* value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:vg.Info.data)
}
 void Info::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:vg.Info.data)
}
 ::std::string* Info::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:vg.Info.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Info::release_data() {
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Info::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:vg.Info.data)
}

// optional .vg.Metadata metadata = 5;
bool Info::has_metadata() const {
  return !_is_default_instance_ && metadata_ != NULL;
}
void Info::clear_metadata() {
  if (GetArenaNoVirtual() == NULL && metadata_ != NULL) delete metadata_;
  metadata_ = NULL;
}
const ::vg::Metadata& Info::metadata() const {
  // @@protoc_insertion_point(field_get:vg.Info.metadata)
  return metadata_ != NULL ? *metadata_ : *default_instance_->metadata_;
}
::vg::Metadata* Info::mutable_metadata() {
  
  if (metadata_ == NULL) {
    metadata_ = new ::vg::Metadata;
  }
  // @@protoc_insertion_point(field_mutable:vg.Info.metadata)
  return metadata_;
}
::vg::Metadata* Info::release_metadata() {
  
  ::vg::Metadata* temp = metadata_;
  metadata_ = NULL;
  return temp;
}
void Info::set_allocated_metadata(::vg::Metadata* metadata) {
  delete metadata_;
  metadata_ = metadata;
  if (metadata) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:vg.Info.metadata)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Edit::kFromLengthFieldNumber;
const int Edit::kToLengthFieldNumber;
const int Edit::kSequenceFieldNumber;
const int Edit::kMetadataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Edit::Edit()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vg.Edit)
}

void Edit::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  metadata_ = const_cast< ::vg::Metadata*>(&::vg::Metadata::default_instance());
}

Edit::Edit(const Edit& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:vg.Edit)
}

void Edit::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  from_length_ = 0;
  to_length_ = 0;
  sequence_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  metadata_ = NULL;
}

Edit::~Edit() {
  // @@protoc_insertion_point(destructor:vg.Edit)
  SharedDtor();
}

void Edit::SharedDtor() {
  sequence_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete metadata_;
  }
}

void Edit::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Edit::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Edit_descriptor_;
}

const Edit& Edit::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vg_2eproto();
  return *default_instance_;
}

Edit* Edit::default_instance_ = NULL;

Edit* Edit::New(::google::protobuf::Arena* arena) const {
  Edit* n = new Edit;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Edit::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Edit*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(from_length_, to_length_);
  sequence_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && metadata_ != NULL) delete metadata_;
  metadata_ = NULL;

#undef ZR_HELPER_
#undef ZR_

}

bool Edit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vg.Edit)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 from_length = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &from_length_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_to_length;
        break;
      }

      // optional int32 to_length = 2;
      case 2: {
        if (tag == 16) {
         parse_to_length:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &to_length_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_sequence;
        break;
      }

      // optional string sequence = 3;
      case 3: {
        if (tag == 26) {
         parse_sequence:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sequence()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->sequence().data(), this->sequence().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "vg.Edit.sequence"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_metadata;
        break;
      }

      // optional .vg.Metadata metadata = 4;
      case 4: {
        if (tag == 34) {
         parse_metadata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_metadata()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vg.Edit)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vg.Edit)
  return false;
#undef DO_
}

void Edit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vg.Edit)
  // optional int32 from_length = 1;
  if (this->from_length() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->from_length(), output);
  }

  // optional int32 to_length = 2;
  if (this->to_length() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->to_length(), output);
  }

  // optional string sequence = 3;
  if (this->sequence().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sequence().data(), this->sequence().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vg.Edit.sequence");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->sequence(), output);
  }

  // optional .vg.Metadata metadata = 4;
  if (this->has_metadata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->metadata_, output);
  }

  // @@protoc_insertion_point(serialize_end:vg.Edit)
}

::google::protobuf::uint8* Edit::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:vg.Edit)
  // optional int32 from_length = 1;
  if (this->from_length() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->from_length(), target);
  }

  // optional int32 to_length = 2;
  if (this->to_length() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->to_length(), target);
  }

  // optional string sequence = 3;
  if (this->sequence().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sequence().data(), this->sequence().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vg.Edit.sequence");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->sequence(), target);
  }

  // optional .vg.Metadata metadata = 4;
  if (this->has_metadata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, *this->metadata_, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:vg.Edit)
  return target;
}

int Edit::ByteSize() const {
  int total_size = 0;

  // optional int32 from_length = 1;
  if (this->from_length() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->from_length());
  }

  // optional int32 to_length = 2;
  if (this->to_length() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->to_length());
  }

  // optional string sequence = 3;
  if (this->sequence().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sequence());
  }

  // optional .vg.Metadata metadata = 4;
  if (this->has_metadata()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->metadata_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Edit::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Edit* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Edit>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Edit::MergeFrom(const Edit& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.from_length() != 0) {
    set_from_length(from.from_length());
  }
  if (from.to_length() != 0) {
    set_to_length(from.to_length());
  }
  if (from.sequence().size() > 0) {

    sequence_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sequence_);
  }
  if (from.has_metadata()) {
    mutable_metadata()->::vg::Metadata::MergeFrom(from.metadata());
  }
}

void Edit::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Edit::CopyFrom(const Edit& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Edit::IsInitialized() const {

  return true;
}

void Edit::Swap(Edit* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Edit::InternalSwap(Edit* other) {
  std::swap(from_length_, other->from_length_);
  std::swap(to_length_, other->to_length_);
  sequence_.Swap(&other->sequence_);
  std::swap(metadata_, other->metadata_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Edit::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Edit_descriptor_;
  metadata.reflection = Edit_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Edit

// optional int32 from_length = 1;
void Edit::clear_from_length() {
  from_length_ = 0;
}
 ::google::protobuf::int32 Edit::from_length() const {
  // @@protoc_insertion_point(field_get:vg.Edit.from_length)
  return from_length_;
}
 void Edit::set_from_length(::google::protobuf::int32 value) {
  
  from_length_ = value;
  // @@protoc_insertion_point(field_set:vg.Edit.from_length)
}

// optional int32 to_length = 2;
void Edit::clear_to_length() {
  to_length_ = 0;
}
 ::google::protobuf::int32 Edit::to_length() const {
  // @@protoc_insertion_point(field_get:vg.Edit.to_length)
  return to_length_;
}
 void Edit::set_to_length(::google::protobuf::int32 value) {
  
  to_length_ = value;
  // @@protoc_insertion_point(field_set:vg.Edit.to_length)
}

// optional string sequence = 3;
void Edit::clear_sequence() {
  sequence_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Edit::sequence() const {
  // @@protoc_insertion_point(field_get:vg.Edit.sequence)
  return sequence_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Edit::set_sequence(const ::std::string& value) {
  
  sequence_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:vg.Edit.sequence)
}
 void Edit::set_sequence(const char* value) {
  
  sequence_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:vg.Edit.sequence)
}
 void Edit::set_sequence(const char* value, size_t size) {
  
  sequence_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:vg.Edit.sequence)
}
 ::std::string* Edit::mutable_sequence() {
  
  // @@protoc_insertion_point(field_mutable:vg.Edit.sequence)
  return sequence_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Edit::release_sequence() {
  
  return sequence_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Edit::set_allocated_sequence(::std::string* sequence) {
  if (sequence != NULL) {
    
  } else {
    
  }
  sequence_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sequence);
  // @@protoc_insertion_point(field_set_allocated:vg.Edit.sequence)
}

// optional .vg.Metadata metadata = 4;
bool Edit::has_metadata() const {
  return !_is_default_instance_ && metadata_ != NULL;
}
void Edit::clear_metadata() {
  if (GetArenaNoVirtual() == NULL && metadata_ != NULL) delete metadata_;
  metadata_ = NULL;
}
const ::vg::Metadata& Edit::metadata() const {
  // @@protoc_insertion_point(field_get:vg.Edit.metadata)
  return metadata_ != NULL ? *metadata_ : *default_instance_->metadata_;
}
::vg::Metadata* Edit::mutable_metadata() {
  
  if (metadata_ == NULL) {
    metadata_ = new ::vg::Metadata;
  }
  // @@protoc_insertion_point(field_mutable:vg.Edit.metadata)
  return metadata_;
}
::vg::Metadata* Edit::release_metadata() {
  
  ::vg::Metadata* temp = metadata_;
  metadata_ = NULL;
  return temp;
}
void Edit::set_allocated_metadata(::vg::Metadata* metadata) {
  delete metadata_;
  metadata_ = metadata;
  if (metadata) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:vg.Edit.metadata)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Mapping::kPositionFieldNumber;
const int Mapping::kEditFieldNumber;
const int Mapping::kRankFieldNumber;
const int Mapping::kMetadataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Mapping::Mapping()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vg.Mapping)
}

void Mapping::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  position_ = const_cast< ::vg::Position*>(&::vg::Position::default_instance());
  metadata_ = const_cast< ::vg::Metadata*>(&::vg::Metadata::default_instance());
}

Mapping::Mapping(const Mapping& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:vg.Mapping)
}

void Mapping::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  position_ = NULL;
  rank_ = GOOGLE_LONGLONG(0);
  metadata_ = NULL;
}

Mapping::~Mapping() {
  // @@protoc_insertion_point(destructor:vg.Mapping)
  SharedDtor();
}

void Mapping::SharedDtor() {
  if (this != default_instance_) {
    delete position_;
    delete metadata_;
  }
}

void Mapping::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Mapping::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Mapping_descriptor_;
}

const Mapping& Mapping::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vg_2eproto();
  return *default_instance_;
}

Mapping* Mapping::default_instance_ = NULL;

Mapping* Mapping::New(::google::protobuf::Arena* arena) const {
  Mapping* n = new Mapping;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Mapping::Clear() {
  if (GetArenaNoVirtual() == NULL && position_ != NULL) delete position_;
  position_ = NULL;
  rank_ = GOOGLE_LONGLONG(0);
  if (GetArenaNoVirtual() == NULL && metadata_ != NULL) delete metadata_;
  metadata_ = NULL;
  edit_.Clear();
}

bool Mapping::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vg.Mapping)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .vg.Position position = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_position()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_edit;
        break;
      }

      // repeated .vg.Edit edit = 2;
      case 2: {
        if (tag == 18) {
         parse_edit:
          DO_(input->IncrementRecursionDepth());
         parse_loop_edit:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_edit()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_edit;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(34)) goto parse_metadata;
        break;
      }

      // optional .vg.Metadata metadata = 4;
      case 4: {
        if (tag == 34) {
         parse_metadata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_metadata()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_rank;
        break;
      }

      // optional int64 rank = 5;
      case 5: {
        if (tag == 40) {
         parse_rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &rank_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vg.Mapping)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vg.Mapping)
  return false;
#undef DO_
}

void Mapping::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vg.Mapping)
  // optional .vg.Position position = 1;
  if (this->has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->position_, output);
  }

  // repeated .vg.Edit edit = 2;
  for (unsigned int i = 0, n = this->edit_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->edit(i), output);
  }

  // optional .vg.Metadata metadata = 4;
  if (this->has_metadata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->metadata_, output);
  }

  // optional int64 rank = 5;
  if (this->rank() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->rank(), output);
  }

  // @@protoc_insertion_point(serialize_end:vg.Mapping)
}

::google::protobuf::uint8* Mapping::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:vg.Mapping)
  // optional .vg.Position position = 1;
  if (this->has_position()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->position_, target);
  }

  // repeated .vg.Edit edit = 2;
  for (unsigned int i = 0, n = this->edit_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->edit(i), target);
  }

  // optional .vg.Metadata metadata = 4;
  if (this->has_metadata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, *this->metadata_, target);
  }

  // optional int64 rank = 5;
  if (this->rank() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->rank(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:vg.Mapping)
  return target;
}

int Mapping::ByteSize() const {
  int total_size = 0;

  // optional .vg.Position position = 1;
  if (this->has_position()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->position_);
  }

  // optional int64 rank = 5;
  if (this->rank() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->rank());
  }

  // optional .vg.Metadata metadata = 4;
  if (this->has_metadata()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->metadata_);
  }

  // repeated .vg.Edit edit = 2;
  total_size += 1 * this->edit_size();
  for (int i = 0; i < this->edit_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->edit(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Mapping::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Mapping* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Mapping>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Mapping::MergeFrom(const Mapping& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  edit_.MergeFrom(from.edit_);
  if (from.has_position()) {
    mutable_position()->::vg::Position::MergeFrom(from.position());
  }
  if (from.rank() != 0) {
    set_rank(from.rank());
  }
  if (from.has_metadata()) {
    mutable_metadata()->::vg::Metadata::MergeFrom(from.metadata());
  }
}

void Mapping::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Mapping::CopyFrom(const Mapping& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Mapping::IsInitialized() const {

  return true;
}

void Mapping::Swap(Mapping* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Mapping::InternalSwap(Mapping* other) {
  std::swap(position_, other->position_);
  edit_.UnsafeArenaSwap(&other->edit_);
  std::swap(rank_, other->rank_);
  std::swap(metadata_, other->metadata_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Mapping::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Mapping_descriptor_;
  metadata.reflection = Mapping_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Mapping

// optional .vg.Position position = 1;
bool Mapping::has_position() const {
  return !_is_default_instance_ && position_ != NULL;
}
void Mapping::clear_position() {
  if (GetArenaNoVirtual() == NULL && position_ != NULL) delete position_;
  position_ = NULL;
}
const ::vg::Position& Mapping::position() const {
  // @@protoc_insertion_point(field_get:vg.Mapping.position)
  return position_ != NULL ? *position_ : *default_instance_->position_;
}
::vg::Position* Mapping::mutable_position() {
  
  if (position_ == NULL) {
    position_ = new ::vg::Position;
  }
  // @@protoc_insertion_point(field_mutable:vg.Mapping.position)
  return position_;
}
::vg::Position* Mapping::release_position() {
  
  ::vg::Position* temp = position_;
  position_ = NULL;
  return temp;
}
void Mapping::set_allocated_position(::vg::Position* position) {
  delete position_;
  position_ = position;
  if (position) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:vg.Mapping.position)
}

// repeated .vg.Edit edit = 2;
int Mapping::edit_size() const {
  return edit_.size();
}
void Mapping::clear_edit() {
  edit_.Clear();
}
const ::vg::Edit& Mapping::edit(int index) const {
  // @@protoc_insertion_point(field_get:vg.Mapping.edit)
  return edit_.Get(index);
}
::vg::Edit* Mapping::mutable_edit(int index) {
  // @@protoc_insertion_point(field_mutable:vg.Mapping.edit)
  return edit_.Mutable(index);
}
::vg::Edit* Mapping::add_edit() {
  // @@protoc_insertion_point(field_add:vg.Mapping.edit)
  return edit_.Add();
}
::google::protobuf::RepeatedPtrField< ::vg::Edit >*
Mapping::mutable_edit() {
  // @@protoc_insertion_point(field_mutable_list:vg.Mapping.edit)
  return &edit_;
}
const ::google::protobuf::RepeatedPtrField< ::vg::Edit >&
Mapping::edit() const {
  // @@protoc_insertion_point(field_list:vg.Mapping.edit)
  return edit_;
}

// optional int64 rank = 5;
void Mapping::clear_rank() {
  rank_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 Mapping::rank() const {
  // @@protoc_insertion_point(field_get:vg.Mapping.rank)
  return rank_;
}
 void Mapping::set_rank(::google::protobuf::int64 value) {
  
  rank_ = value;
  // @@protoc_insertion_point(field_set:vg.Mapping.rank)
}

// optional .vg.Metadata metadata = 4;
bool Mapping::has_metadata() const {
  return !_is_default_instance_ && metadata_ != NULL;
}
void Mapping::clear_metadata() {
  if (GetArenaNoVirtual() == NULL && metadata_ != NULL) delete metadata_;
  metadata_ = NULL;
}
const ::vg::Metadata& Mapping::metadata() const {
  // @@protoc_insertion_point(field_get:vg.Mapping.metadata)
  return metadata_ != NULL ? *metadata_ : *default_instance_->metadata_;
}
::vg::Metadata* Mapping::mutable_metadata() {
  
  if (metadata_ == NULL) {
    metadata_ = new ::vg::Metadata;
  }
  // @@protoc_insertion_point(field_mutable:vg.Mapping.metadata)
  return metadata_;
}
::vg::Metadata* Mapping::release_metadata() {
  
  ::vg::Metadata* temp = metadata_;
  metadata_ = NULL;
  return temp;
}
void Mapping::set_allocated_metadata(::vg::Metadata* metadata) {
  delete metadata_;
  metadata_ = metadata;
  if (metadata) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:vg.Mapping.metadata)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Position::kNodeIdFieldNumber;
const int Position::kOffsetFieldNumber;
const int Position::kMetadataFieldNumber;
const int Position::kIsReverseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Position::Position()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vg.Position)
}

void Position::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  metadata_ = const_cast< ::vg::Metadata*>(&::vg::Metadata::default_instance());
}

Position::Position(const Position& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:vg.Position)
}

void Position::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  node_id_ = GOOGLE_LONGLONG(0);
  offset_ = GOOGLE_LONGLONG(0);
  metadata_ = NULL;
  is_reverse_ = false;
}

Position::~Position() {
  // @@protoc_insertion_point(destructor:vg.Position)
  SharedDtor();
}

void Position::SharedDtor() {
  if (this != default_instance_) {
    delete metadata_;
  }
}

void Position::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Position::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Position_descriptor_;
}

const Position& Position::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vg_2eproto();
  return *default_instance_;
}

Position* Position::default_instance_ = NULL;

Position* Position::New(::google::protobuf::Arena* arena) const {
  Position* n = new Position;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Position::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Position*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(node_id_, offset_);
  if (GetArenaNoVirtual() == NULL && metadata_ != NULL) delete metadata_;
  metadata_ = NULL;
  is_reverse_ = false;

#undef ZR_HELPER_
#undef ZR_

}

bool Position::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vg.Position)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 node_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &node_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_offset;
        break;
      }

      // optional int64 offset = 2;
      case 2: {
        if (tag == 16) {
         parse_offset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &offset_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_metadata;
        break;
      }

      // optional .vg.Metadata metadata = 3;
      case 3: {
        if (tag == 26) {
         parse_metadata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_metadata()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_is_reverse;
        break;
      }

      // optional bool is_reverse = 4;
      case 4: {
        if (tag == 32) {
         parse_is_reverse:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_reverse_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vg.Position)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vg.Position)
  return false;
#undef DO_
}

void Position::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vg.Position)
  // optional int64 node_id = 1;
  if (this->node_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->node_id(), output);
  }

  // optional int64 offset = 2;
  if (this->offset() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->offset(), output);
  }

  // optional .vg.Metadata metadata = 3;
  if (this->has_metadata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->metadata_, output);
  }

  // optional bool is_reverse = 4;
  if (this->is_reverse() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->is_reverse(), output);
  }

  // @@protoc_insertion_point(serialize_end:vg.Position)
}

::google::protobuf::uint8* Position::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:vg.Position)
  // optional int64 node_id = 1;
  if (this->node_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->node_id(), target);
  }

  // optional int64 offset = 2;
  if (this->offset() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->offset(), target);
  }

  // optional .vg.Metadata metadata = 3;
  if (this->has_metadata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, *this->metadata_, target);
  }

  // optional bool is_reverse = 4;
  if (this->is_reverse() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->is_reverse(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:vg.Position)
  return target;
}

int Position::ByteSize() const {
  int total_size = 0;

  // optional int64 node_id = 1;
  if (this->node_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->node_id());
  }

  // optional int64 offset = 2;
  if (this->offset() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->offset());
  }

  // optional .vg.Metadata metadata = 3;
  if (this->has_metadata()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->metadata_);
  }

  // optional bool is_reverse = 4;
  if (this->is_reverse() != 0) {
    total_size += 1 + 1;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Position::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Position* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Position>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Position::MergeFrom(const Position& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.node_id() != 0) {
    set_node_id(from.node_id());
  }
  if (from.offset() != 0) {
    set_offset(from.offset());
  }
  if (from.has_metadata()) {
    mutable_metadata()->::vg::Metadata::MergeFrom(from.metadata());
  }
  if (from.is_reverse() != 0) {
    set_is_reverse(from.is_reverse());
  }
}

void Position::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Position::CopyFrom(const Position& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Position::IsInitialized() const {

  return true;
}

void Position::Swap(Position* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Position::InternalSwap(Position* other) {
  std::swap(node_id_, other->node_id_);
  std::swap(offset_, other->offset_);
  std::swap(metadata_, other->metadata_);
  std::swap(is_reverse_, other->is_reverse_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Position::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Position_descriptor_;
  metadata.reflection = Position_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Position

// optional int64 node_id = 1;
void Position::clear_node_id() {
  node_id_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 Position::node_id() const {
  // @@protoc_insertion_point(field_get:vg.Position.node_id)
  return node_id_;
}
 void Position::set_node_id(::google::protobuf::int64 value) {
  
  node_id_ = value;
  // @@protoc_insertion_point(field_set:vg.Position.node_id)
}

// optional int64 offset = 2;
void Position::clear_offset() {
  offset_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 Position::offset() const {
  // @@protoc_insertion_point(field_get:vg.Position.offset)
  return offset_;
}
 void Position::set_offset(::google::protobuf::int64 value) {
  
  offset_ = value;
  // @@protoc_insertion_point(field_set:vg.Position.offset)
}

// optional .vg.Metadata metadata = 3;
bool Position::has_metadata() const {
  return !_is_default_instance_ && metadata_ != NULL;
}
void Position::clear_metadata() {
  if (GetArenaNoVirtual() == NULL && metadata_ != NULL) delete metadata_;
  metadata_ = NULL;
}
const ::vg::Metadata& Position::metadata() const {
  // @@protoc_insertion_point(field_get:vg.Position.metadata)
  return metadata_ != NULL ? *metadata_ : *default_instance_->metadata_;
}
::vg::Metadata* Position::mutable_metadata() {
  
  if (metadata_ == NULL) {
    metadata_ = new ::vg::Metadata;
  }
  // @@protoc_insertion_point(field_mutable:vg.Position.metadata)
  return metadata_;
}
::vg::Metadata* Position::release_metadata() {
  
  ::vg::Metadata* temp = metadata_;
  metadata_ = NULL;
  return temp;
}
void Position::set_allocated_metadata(::vg::Metadata* metadata) {
  delete metadata_;
  metadata_ = metadata;
  if (metadata) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:vg.Position.metadata)
}

// optional bool is_reverse = 4;
void Position::clear_is_reverse() {
  is_reverse_ = false;
}
 bool Position::is_reverse() const {
  // @@protoc_insertion_point(field_get:vg.Position.is_reverse)
  return is_reverse_;
}
 void Position::set_is_reverse(bool value) {
  
  is_reverse_ = value;
  // @@protoc_insertion_point(field_set:vg.Position.is_reverse)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Path::kNameFieldNumber;
const int Path::kMappingFieldNumber;
const int Path::kMetadataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Path::Path()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vg.Path)
}

void Path::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  metadata_ = const_cast< ::vg::Metadata*>(&::vg::Metadata::default_instance());
}

Path::Path(const Path& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:vg.Path)
}

void Path::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  metadata_ = NULL;
}

Path::~Path() {
  // @@protoc_insertion_point(destructor:vg.Path)
  SharedDtor();
}

void Path::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete metadata_;
  }
}

void Path::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Path::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Path_descriptor_;
}

const Path& Path::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vg_2eproto();
  return *default_instance_;
}

Path* Path::default_instance_ = NULL;

Path* Path::New(::google::protobuf::Arena* arena) const {
  Path* n = new Path;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Path::Clear() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && metadata_ != NULL) delete metadata_;
  metadata_ = NULL;
  mapping_.Clear();
}

bool Path::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vg.Path)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "vg.Path.name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_mapping;
        break;
      }

      // repeated .vg.Mapping mapping = 2;
      case 2: {
        if (tag == 18) {
         parse_mapping:
          DO_(input->IncrementRecursionDepth());
         parse_loop_mapping:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_mapping()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_mapping;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(26)) goto parse_metadata;
        break;
      }

      // optional .vg.Metadata metadata = 3;
      case 3: {
        if (tag == 26) {
         parse_metadata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_metadata()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vg.Path)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vg.Path)
  return false;
#undef DO_
}

void Path::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vg.Path)
  // optional string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vg.Path.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // repeated .vg.Mapping mapping = 2;
  for (unsigned int i = 0, n = this->mapping_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->mapping(i), output);
  }

  // optional .vg.Metadata metadata = 3;
  if (this->has_metadata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->metadata_, output);
  }

  // @@protoc_insertion_point(serialize_end:vg.Path)
}

::google::protobuf::uint8* Path::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:vg.Path)
  // optional string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vg.Path.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // repeated .vg.Mapping mapping = 2;
  for (unsigned int i = 0, n = this->mapping_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->mapping(i), target);
  }

  // optional .vg.Metadata metadata = 3;
  if (this->has_metadata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, *this->metadata_, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:vg.Path)
  return target;
}

int Path::ByteSize() const {
  int total_size = 0;

  // optional string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // optional .vg.Metadata metadata = 3;
  if (this->has_metadata()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->metadata_);
  }

  // repeated .vg.Mapping mapping = 2;
  total_size += 1 * this->mapping_size();
  for (int i = 0; i < this->mapping_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->mapping(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Path::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Path* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Path>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Path::MergeFrom(const Path& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  mapping_.MergeFrom(from.mapping_);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_metadata()) {
    mutable_metadata()->::vg::Metadata::MergeFrom(from.metadata());
  }
}

void Path::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Path::CopyFrom(const Path& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Path::IsInitialized() const {

  return true;
}

void Path::Swap(Path* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Path::InternalSwap(Path* other) {
  name_.Swap(&other->name_);
  mapping_.UnsafeArenaSwap(&other->mapping_);
  std::swap(metadata_, other->metadata_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Path::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Path_descriptor_;
  metadata.reflection = Path_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Path

// optional string name = 1;
void Path::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Path::name() const {
  // @@protoc_insertion_point(field_get:vg.Path.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Path::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:vg.Path.name)
}
 void Path::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:vg.Path.name)
}
 void Path::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:vg.Path.name)
}
 ::std::string* Path::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:vg.Path.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Path::release_name() {
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Path::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:vg.Path.name)
}

// repeated .vg.Mapping mapping = 2;
int Path::mapping_size() const {
  return mapping_.size();
}
void Path::clear_mapping() {
  mapping_.Clear();
}
const ::vg::Mapping& Path::mapping(int index) const {
  // @@protoc_insertion_point(field_get:vg.Path.mapping)
  return mapping_.Get(index);
}
::vg::Mapping* Path::mutable_mapping(int index) {
  // @@protoc_insertion_point(field_mutable:vg.Path.mapping)
  return mapping_.Mutable(index);
}
::vg::Mapping* Path::add_mapping() {
  // @@protoc_insertion_point(field_add:vg.Path.mapping)
  return mapping_.Add();
}
::google::protobuf::RepeatedPtrField< ::vg::Mapping >*
Path::mutable_mapping() {
  // @@protoc_insertion_point(field_mutable_list:vg.Path.mapping)
  return &mapping_;
}
const ::google::protobuf::RepeatedPtrField< ::vg::Mapping >&
Path::mapping() const {
  // @@protoc_insertion_point(field_list:vg.Path.mapping)
  return mapping_;
}

// optional .vg.Metadata metadata = 3;
bool Path::has_metadata() const {
  return !_is_default_instance_ && metadata_ != NULL;
}
void Path::clear_metadata() {
  if (GetArenaNoVirtual() == NULL && metadata_ != NULL) delete metadata_;
  metadata_ = NULL;
}
const ::vg::Metadata& Path::metadata() const {
  // @@protoc_insertion_point(field_get:vg.Path.metadata)
  return metadata_ != NULL ? *metadata_ : *default_instance_->metadata_;
}
::vg::Metadata* Path::mutable_metadata() {
  
  if (metadata_ == NULL) {
    metadata_ = new ::vg::Metadata;
  }
  // @@protoc_insertion_point(field_mutable:vg.Path.metadata)
  return metadata_;
}
::vg::Metadata* Path::release_metadata() {
  
  ::vg::Metadata* temp = metadata_;
  metadata_ = NULL;
  return temp;
}
void Path::set_allocated_metadata(::vg::Metadata* metadata) {
  delete metadata_;
  metadata_ = metadata;
  if (metadata) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:vg.Path.metadata)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Alignment::kSequenceFieldNumber;
const int Alignment::kPathFieldNumber;
const int Alignment::kNameFieldNumber;
const int Alignment::kQualityFieldNumber;
const int Alignment::kMappingQualityFieldNumber;
const int Alignment::kScoreFieldNumber;
const int Alignment::kQueryPositionFieldNumber;
const int Alignment::kSampleNameFieldNumber;
const int Alignment::kReadGroupFieldNumber;
const int Alignment::kFragmentPrevFieldNumber;
const int Alignment::kFragmentNextFieldNumber;
const int Alignment::kDataFieldNumber;
const int Alignment::kMetadataFieldNumber;
const int Alignment::kIsSecondaryFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Alignment::Alignment()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vg.Alignment)
}

void Alignment::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  path_ = const_cast< ::vg::Path*>(&::vg::Path::default_instance());
  fragment_prev_ = const_cast< ::vg::Alignment*>(&::vg::Alignment::default_instance());
  fragment_next_ = const_cast< ::vg::Alignment*>(&::vg::Alignment::default_instance());
  metadata_ = const_cast< ::vg::Metadata*>(&::vg::Metadata::default_instance());
}

Alignment::Alignment(const Alignment& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:vg.Alignment)
}

void Alignment::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  sequence_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  path_ = NULL;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  quality_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mapping_quality_ = 0;
  score_ = 0;
  query_position_ = 0;
  sample_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  read_group_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fragment_prev_ = NULL;
  fragment_next_ = NULL;
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  metadata_ = NULL;
  is_secondary_ = false;
}

Alignment::~Alignment() {
  // @@protoc_insertion_point(destructor:vg.Alignment)
  SharedDtor();
}

void Alignment::SharedDtor() {
  sequence_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  quality_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sample_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  read_group_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete path_;
    delete fragment_prev_;
    delete fragment_next_;
    delete metadata_;
  }
}

void Alignment::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Alignment::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Alignment_descriptor_;
}

const Alignment& Alignment::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vg_2eproto();
  return *default_instance_;
}

Alignment* Alignment::default_instance_ = NULL;

Alignment* Alignment::New(::google::protobuf::Arena* arena) const {
  Alignment* n = new Alignment;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Alignment::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Alignment*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(mapping_quality_, score_);
  sequence_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && path_ != NULL) delete path_;
  path_ = NULL;
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  quality_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  query_position_ = 0;
  sample_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  read_group_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && fragment_prev_ != NULL) delete fragment_prev_;
  fragment_prev_ = NULL;
  if (GetArenaNoVirtual() == NULL && fragment_next_ != NULL) delete fragment_next_;
  fragment_next_ = NULL;
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && metadata_ != NULL) delete metadata_;
  metadata_ = NULL;
  is_secondary_ = false;

#undef ZR_HELPER_
#undef ZR_

}

bool Alignment::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vg.Alignment)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string sequence = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sequence()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->sequence().data(), this->sequence().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "vg.Alignment.sequence"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_path;
        break;
      }

      // optional .vg.Path path = 2;
      case 2: {
        if (tag == 18) {
         parse_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_path()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // optional string name = 3;
      case 3: {
        if (tag == 26) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "vg.Alignment.name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_quality;
        break;
      }

      // optional bytes quality = 4;
      case 4: {
        if (tag == 34) {
         parse_quality:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_quality()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_mapping_quality;
        break;
      }

      // optional int32 mapping_quality = 5;
      case 5: {
        if (tag == 40) {
         parse_mapping_quality:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mapping_quality_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_score;
        break;
      }

      // optional int32 score = 6;
      case 6: {
        if (tag == 48) {
         parse_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &score_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_query_position;
        break;
      }

      // optional int32 query_position = 7;
      case 7: {
        if (tag == 56) {
         parse_query_position:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &query_position_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_sample_name;
        break;
      }

      // optional string sample_name = 9;
      case 9: {
        if (tag == 74) {
         parse_sample_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sample_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->sample_name().data(), this->sample_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "vg.Alignment.sample_name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_read_group;
        break;
      }

      // optional string read_group = 10;
      case 10: {
        if (tag == 82) {
         parse_read_group:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_read_group()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->read_group().data(), this->read_group().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "vg.Alignment.read_group"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_fragment_prev;
        break;
      }

      // optional .vg.Alignment fragment_prev = 11;
      case 11: {
        if (tag == 90) {
         parse_fragment_prev:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fragment_prev()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_fragment_next;
        break;
      }

      // optional .vg.Alignment fragment_next = 12;
      case 12: {
        if (tag == 98) {
         parse_fragment_next:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fragment_next()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_data;
        break;
      }

      // optional bytes data = 13;
      case 13: {
        if (tag == 106) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_metadata;
        break;
      }

      // optional .vg.Metadata metadata = 14;
      case 14: {
        if (tag == 114) {
         parse_metadata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_metadata()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_is_secondary;
        break;
      }

      // optional bool is_secondary = 15;
      case 15: {
        if (tag == 120) {
         parse_is_secondary:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_secondary_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vg.Alignment)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vg.Alignment)
  return false;
#undef DO_
}

void Alignment::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vg.Alignment)
  // optional string sequence = 1;
  if (this->sequence().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sequence().data(), this->sequence().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vg.Alignment.sequence");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->sequence(), output);
  }

  // optional .vg.Path path = 2;
  if (this->has_path()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->path_, output);
  }

  // optional string name = 3;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vg.Alignment.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->name(), output);
  }

  // optional bytes quality = 4;
  if (this->quality().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->quality(), output);
  }

  // optional int32 mapping_quality = 5;
  if (this->mapping_quality() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->mapping_quality(), output);
  }

  // optional int32 score = 6;
  if (this->score() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->score(), output);
  }

  // optional int32 query_position = 7;
  if (this->query_position() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->query_position(), output);
  }

  // optional string sample_name = 9;
  if (this->sample_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sample_name().data(), this->sample_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vg.Alignment.sample_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->sample_name(), output);
  }

  // optional string read_group = 10;
  if (this->read_group().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->read_group().data(), this->read_group().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vg.Alignment.read_group");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->read_group(), output);
  }

  // optional .vg.Alignment fragment_prev = 11;
  if (this->has_fragment_prev()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, *this->fragment_prev_, output);
  }

  // optional .vg.Alignment fragment_next = 12;
  if (this->has_fragment_next()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, *this->fragment_next_, output);
  }

  // optional bytes data = 13;
  if (this->data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      13, this->data(), output);
  }

  // optional .vg.Metadata metadata = 14;
  if (this->has_metadata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, *this->metadata_, output);
  }

  // optional bool is_secondary = 15;
  if (this->is_secondary() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(15, this->is_secondary(), output);
  }

  // @@protoc_insertion_point(serialize_end:vg.Alignment)
}

::google::protobuf::uint8* Alignment::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:vg.Alignment)
  // optional string sequence = 1;
  if (this->sequence().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sequence().data(), this->sequence().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vg.Alignment.sequence");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->sequence(), target);
  }

  // optional .vg.Path path = 2;
  if (this->has_path()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *this->path_, target);
  }

  // optional string name = 3;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vg.Alignment.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // optional bytes quality = 4;
  if (this->quality().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->quality(), target);
  }

  // optional int32 mapping_quality = 5;
  if (this->mapping_quality() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->mapping_quality(), target);
  }

  // optional int32 score = 6;
  if (this->score() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->score(), target);
  }

  // optional int32 query_position = 7;
  if (this->query_position() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->query_position(), target);
  }

  // optional string sample_name = 9;
  if (this->sample_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sample_name().data(), this->sample_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vg.Alignment.sample_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->sample_name(), target);
  }

  // optional string read_group = 10;
  if (this->read_group().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->read_group().data(), this->read_group().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vg.Alignment.read_group");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->read_group(), target);
  }

  // optional .vg.Alignment fragment_prev = 11;
  if (this->has_fragment_prev()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, *this->fragment_prev_, target);
  }

  // optional .vg.Alignment fragment_next = 12;
  if (this->has_fragment_next()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, *this->fragment_next_, target);
  }

  // optional bytes data = 13;
  if (this->data().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        13, this->data(), target);
  }

  // optional .vg.Metadata metadata = 14;
  if (this->has_metadata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, *this->metadata_, target);
  }

  // optional bool is_secondary = 15;
  if (this->is_secondary() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(15, this->is_secondary(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:vg.Alignment)
  return target;
}

int Alignment::ByteSize() const {
  int total_size = 0;

  // optional string sequence = 1;
  if (this->sequence().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sequence());
  }

  // optional .vg.Path path = 2;
  if (this->has_path()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->path_);
  }

  // optional string name = 3;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // optional bytes quality = 4;
  if (this->quality().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->quality());
  }

  // optional int32 mapping_quality = 5;
  if (this->mapping_quality() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->mapping_quality());
  }

  // optional int32 score = 6;
  if (this->score() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->score());
  }

  // optional int32 query_position = 7;
  if (this->query_position() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->query_position());
  }

  // optional string sample_name = 9;
  if (this->sample_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sample_name());
  }

  // optional string read_group = 10;
  if (this->read_group().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->read_group());
  }

  // optional .vg.Alignment fragment_prev = 11;
  if (this->has_fragment_prev()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->fragment_prev_);
  }

  // optional .vg.Alignment fragment_next = 12;
  if (this->has_fragment_next()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->fragment_next_);
  }

  // optional bytes data = 13;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->data());
  }

  // optional .vg.Metadata metadata = 14;
  if (this->has_metadata()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->metadata_);
  }

  // optional bool is_secondary = 15;
  if (this->is_secondary() != 0) {
    total_size += 1 + 1;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Alignment::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Alignment* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Alignment>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Alignment::MergeFrom(const Alignment& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.sequence().size() > 0) {

    sequence_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sequence_);
  }
  if (from.has_path()) {
    mutable_path()->::vg::Path::MergeFrom(from.path());
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.quality().size() > 0) {

    quality_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.quality_);
  }
  if (from.mapping_quality() != 0) {
    set_mapping_quality(from.mapping_quality());
  }
  if (from.score() != 0) {
    set_score(from.score());
  }
  if (from.query_position() != 0) {
    set_query_position(from.query_position());
  }
  if (from.sample_name().size() > 0) {

    sample_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sample_name_);
  }
  if (from.read_group().size() > 0) {

    read_group_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.read_group_);
  }
  if (from.has_fragment_prev()) {
    mutable_fragment_prev()->::vg::Alignment::MergeFrom(from.fragment_prev());
  }
  if (from.has_fragment_next()) {
    mutable_fragment_next()->::vg::Alignment::MergeFrom(from.fragment_next());
  }
  if (from.data().size() > 0) {

    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  if (from.has_metadata()) {
    mutable_metadata()->::vg::Metadata::MergeFrom(from.metadata());
  }
  if (from.is_secondary() != 0) {
    set_is_secondary(from.is_secondary());
  }
}

void Alignment::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Alignment::CopyFrom(const Alignment& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Alignment::IsInitialized() const {

  return true;
}

void Alignment::Swap(Alignment* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Alignment::InternalSwap(Alignment* other) {
  sequence_.Swap(&other->sequence_);
  std::swap(path_, other->path_);
  name_.Swap(&other->name_);
  quality_.Swap(&other->quality_);
  std::swap(mapping_quality_, other->mapping_quality_);
  std::swap(score_, other->score_);
  std::swap(query_position_, other->query_position_);
  sample_name_.Swap(&other->sample_name_);
  read_group_.Swap(&other->read_group_);
  std::swap(fragment_prev_, other->fragment_prev_);
  std::swap(fragment_next_, other->fragment_next_);
  data_.Swap(&other->data_);
  std::swap(metadata_, other->metadata_);
  std::swap(is_secondary_, other->is_secondary_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Alignment::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Alignment_descriptor_;
  metadata.reflection = Alignment_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Alignment

// optional string sequence = 1;
void Alignment::clear_sequence() {
  sequence_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Alignment::sequence() const {
  // @@protoc_insertion_point(field_get:vg.Alignment.sequence)
  return sequence_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Alignment::set_sequence(const ::std::string& value) {
  
  sequence_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:vg.Alignment.sequence)
}
 void Alignment::set_sequence(const char* value) {
  
  sequence_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:vg.Alignment.sequence)
}
 void Alignment::set_sequence(const char* value, size_t size) {
  
  sequence_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:vg.Alignment.sequence)
}
 ::std::string* Alignment::mutable_sequence() {
  
  // @@protoc_insertion_point(field_mutable:vg.Alignment.sequence)
  return sequence_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Alignment::release_sequence() {
  
  return sequence_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Alignment::set_allocated_sequence(::std::string* sequence) {
  if (sequence != NULL) {
    
  } else {
    
  }
  sequence_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sequence);
  // @@protoc_insertion_point(field_set_allocated:vg.Alignment.sequence)
}

// optional .vg.Path path = 2;
bool Alignment::has_path() const {
  return !_is_default_instance_ && path_ != NULL;
}
void Alignment::clear_path() {
  if (GetArenaNoVirtual() == NULL && path_ != NULL) delete path_;
  path_ = NULL;
}
const ::vg::Path& Alignment::path() const {
  // @@protoc_insertion_point(field_get:vg.Alignment.path)
  return path_ != NULL ? *path_ : *default_instance_->path_;
}
::vg::Path* Alignment::mutable_path() {
  
  if (path_ == NULL) {
    path_ = new ::vg::Path;
  }
  // @@protoc_insertion_point(field_mutable:vg.Alignment.path)
  return path_;
}
::vg::Path* Alignment::release_path() {
  
  ::vg::Path* temp = path_;
  path_ = NULL;
  return temp;
}
void Alignment::set_allocated_path(::vg::Path* path) {
  delete path_;
  path_ = path;
  if (path) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:vg.Alignment.path)
}

// optional string name = 3;
void Alignment::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Alignment::name() const {
  // @@protoc_insertion_point(field_get:vg.Alignment.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Alignment::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:vg.Alignment.name)
}
 void Alignment::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:vg.Alignment.name)
}
 void Alignment::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:vg.Alignment.name)
}
 ::std::string* Alignment::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:vg.Alignment.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Alignment::release_name() {
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Alignment::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:vg.Alignment.name)
}

// optional bytes quality = 4;
void Alignment::clear_quality() {
  quality_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Alignment::quality() const {
  // @@protoc_insertion_point(field_get:vg.Alignment.quality)
  return quality_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Alignment::set_quality(const ::std::string& value) {
  
  quality_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:vg.Alignment.quality)
}
 void Alignment::set_quality(const char* value) {
  
  quality_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:vg.Alignment.quality)
}
 void Alignment::set_quality(const void* value, size_t size) {
  
  quality_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:vg.Alignment.quality)
}
 ::std::string* Alignment::mutable_quality() {
  
  // @@protoc_insertion_point(field_mutable:vg.Alignment.quality)
  return quality_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Alignment::release_quality() {
  
  return quality_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Alignment::set_allocated_quality(::std::string* quality) {
  if (quality != NULL) {
    
  } else {
    
  }
  quality_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), quality);
  // @@protoc_insertion_point(field_set_allocated:vg.Alignment.quality)
}

// optional int32 mapping_quality = 5;
void Alignment::clear_mapping_quality() {
  mapping_quality_ = 0;
}
 ::google::protobuf::int32 Alignment::mapping_quality() const {
  // @@protoc_insertion_point(field_get:vg.Alignment.mapping_quality)
  return mapping_quality_;
}
 void Alignment::set_mapping_quality(::google::protobuf::int32 value) {
  
  mapping_quality_ = value;
  // @@protoc_insertion_point(field_set:vg.Alignment.mapping_quality)
}

// optional int32 score = 6;
void Alignment::clear_score() {
  score_ = 0;
}
 ::google::protobuf::int32 Alignment::score() const {
  // @@protoc_insertion_point(field_get:vg.Alignment.score)
  return score_;
}
 void Alignment::set_score(::google::protobuf::int32 value) {
  
  score_ = value;
  // @@protoc_insertion_point(field_set:vg.Alignment.score)
}

// optional int32 query_position = 7;
void Alignment::clear_query_position() {
  query_position_ = 0;
}
 ::google::protobuf::int32 Alignment::query_position() const {
  // @@protoc_insertion_point(field_get:vg.Alignment.query_position)
  return query_position_;
}
 void Alignment::set_query_position(::google::protobuf::int32 value) {
  
  query_position_ = value;
  // @@protoc_insertion_point(field_set:vg.Alignment.query_position)
}

// optional string sample_name = 9;
void Alignment::clear_sample_name() {
  sample_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Alignment::sample_name() const {
  // @@protoc_insertion_point(field_get:vg.Alignment.sample_name)
  return sample_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Alignment::set_sample_name(const ::std::string& value) {
  
  sample_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:vg.Alignment.sample_name)
}
 void Alignment::set_sample_name(const char* value) {
  
  sample_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:vg.Alignment.sample_name)
}
 void Alignment::set_sample_name(const char* value, size_t size) {
  
  sample_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:vg.Alignment.sample_name)
}
 ::std::string* Alignment::mutable_sample_name() {
  
  // @@protoc_insertion_point(field_mutable:vg.Alignment.sample_name)
  return sample_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Alignment::release_sample_name() {
  
  return sample_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Alignment::set_allocated_sample_name(::std::string* sample_name) {
  if (sample_name != NULL) {
    
  } else {
    
  }
  sample_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sample_name);
  // @@protoc_insertion_point(field_set_allocated:vg.Alignment.sample_name)
}

// optional string read_group = 10;
void Alignment::clear_read_group() {
  read_group_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Alignment::read_group() const {
  // @@protoc_insertion_point(field_get:vg.Alignment.read_group)
  return read_group_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Alignment::set_read_group(const ::std::string& value) {
  
  read_group_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:vg.Alignment.read_group)
}
 void Alignment::set_read_group(const char* value) {
  
  read_group_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:vg.Alignment.read_group)
}
 void Alignment::set_read_group(const char* value, size_t size) {
  
  read_group_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:vg.Alignment.read_group)
}
 ::std::string* Alignment::mutable_read_group() {
  
  // @@protoc_insertion_point(field_mutable:vg.Alignment.read_group)
  return read_group_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Alignment::release_read_group() {
  
  return read_group_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Alignment::set_allocated_read_group(::std::string* read_group) {
  if (read_group != NULL) {
    
  } else {
    
  }
  read_group_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), read_group);
  // @@protoc_insertion_point(field_set_allocated:vg.Alignment.read_group)
}

// optional .vg.Alignment fragment_prev = 11;
bool Alignment::has_fragment_prev() const {
  return !_is_default_instance_ && fragment_prev_ != NULL;
}
void Alignment::clear_fragment_prev() {
  if (GetArenaNoVirtual() == NULL && fragment_prev_ != NULL) delete fragment_prev_;
  fragment_prev_ = NULL;
}
const ::vg::Alignment& Alignment::fragment_prev() const {
  // @@protoc_insertion_point(field_get:vg.Alignment.fragment_prev)
  return fragment_prev_ != NULL ? *fragment_prev_ : *default_instance_->fragment_prev_;
}
::vg::Alignment* Alignment::mutable_fragment_prev() {
  
  if (fragment_prev_ == NULL) {
    fragment_prev_ = new ::vg::Alignment;
  }
  // @@protoc_insertion_point(field_mutable:vg.Alignment.fragment_prev)
  return fragment_prev_;
}
::vg::Alignment* Alignment::release_fragment_prev() {
  
  ::vg::Alignment* temp = fragment_prev_;
  fragment_prev_ = NULL;
  return temp;
}
void Alignment::set_allocated_fragment_prev(::vg::Alignment* fragment_prev) {
  delete fragment_prev_;
  fragment_prev_ = fragment_prev;
  if (fragment_prev) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:vg.Alignment.fragment_prev)
}

// optional .vg.Alignment fragment_next = 12;
bool Alignment::has_fragment_next() const {
  return !_is_default_instance_ && fragment_next_ != NULL;
}
void Alignment::clear_fragment_next() {
  if (GetArenaNoVirtual() == NULL && fragment_next_ != NULL) delete fragment_next_;
  fragment_next_ = NULL;
}
const ::vg::Alignment& Alignment::fragment_next() const {
  // @@protoc_insertion_point(field_get:vg.Alignment.fragment_next)
  return fragment_next_ != NULL ? *fragment_next_ : *default_instance_->fragment_next_;
}
::vg::Alignment* Alignment::mutable_fragment_next() {
  
  if (fragment_next_ == NULL) {
    fragment_next_ = new ::vg::Alignment;
  }
  // @@protoc_insertion_point(field_mutable:vg.Alignment.fragment_next)
  return fragment_next_;
}
::vg::Alignment* Alignment::release_fragment_next() {
  
  ::vg::Alignment* temp = fragment_next_;
  fragment_next_ = NULL;
  return temp;
}
void Alignment::set_allocated_fragment_next(::vg::Alignment* fragment_next) {
  delete fragment_next_;
  fragment_next_ = fragment_next;
  if (fragment_next) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:vg.Alignment.fragment_next)
}

// optional bytes data = 13;
void Alignment::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Alignment::data() const {
  // @@protoc_insertion_point(field_get:vg.Alignment.data)
  return data_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Alignment::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:vg.Alignment.data)
}
 void Alignment::set_data(const char* value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:vg.Alignment.data)
}
 void Alignment::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:vg.Alignment.data)
}
 ::std::string* Alignment::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:vg.Alignment.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Alignment::release_data() {
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Alignment::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:vg.Alignment.data)
}

// optional .vg.Metadata metadata = 14;
bool Alignment::has_metadata() const {
  return !_is_default_instance_ && metadata_ != NULL;
}
void Alignment::clear_metadata() {
  if (GetArenaNoVirtual() == NULL && metadata_ != NULL) delete metadata_;
  metadata_ = NULL;
}
const ::vg::Metadata& Alignment::metadata() const {
  // @@protoc_insertion_point(field_get:vg.Alignment.metadata)
  return metadata_ != NULL ? *metadata_ : *default_instance_->metadata_;
}
::vg::Metadata* Alignment::mutable_metadata() {
  
  if (metadata_ == NULL) {
    metadata_ = new ::vg::Metadata;
  }
  // @@protoc_insertion_point(field_mutable:vg.Alignment.metadata)
  return metadata_;
}
::vg::Metadata* Alignment::release_metadata() {
  
  ::vg::Metadata* temp = metadata_;
  metadata_ = NULL;
  return temp;
}
void Alignment::set_allocated_metadata(::vg::Metadata* metadata) {
  delete metadata_;
  metadata_ = metadata;
  if (metadata) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:vg.Alignment.metadata)
}

// optional bool is_secondary = 15;
void Alignment::clear_is_secondary() {
  is_secondary_ = false;
}
 bool Alignment::is_secondary() const {
  // @@protoc_insertion_point(field_get:vg.Alignment.is_secondary)
  return is_secondary_;
}
 void Alignment::set_is_secondary(bool value) {
  
  is_secondary_ = value;
  // @@protoc_insertion_point(field_set:vg.Alignment.is_secondary)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Fragment::kAlignmentFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Fragment::Fragment()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vg.Fragment)
}

void Fragment::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Fragment::Fragment(const Fragment& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:vg.Fragment)
}

void Fragment::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

Fragment::~Fragment() {
  // @@protoc_insertion_point(destructor:vg.Fragment)
  SharedDtor();
}

void Fragment::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Fragment::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Fragment::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Fragment_descriptor_;
}

const Fragment& Fragment::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vg_2eproto();
  return *default_instance_;
}

Fragment* Fragment::default_instance_ = NULL;

Fragment* Fragment::New(::google::protobuf::Arena* arena) const {
  Fragment* n = new Fragment;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Fragment::Clear() {
  alignment_.Clear();
}

bool Fragment::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vg.Fragment)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .vg.Alignment alignment = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_alignment:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_alignment()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_alignment;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vg.Fragment)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vg.Fragment)
  return false;
#undef DO_
}

void Fragment::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vg.Fragment)
  // repeated .vg.Alignment alignment = 1;
  for (unsigned int i = 0, n = this->alignment_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->alignment(i), output);
  }

  // @@protoc_insertion_point(serialize_end:vg.Fragment)
}

::google::protobuf::uint8* Fragment::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:vg.Fragment)
  // repeated .vg.Alignment alignment = 1;
  for (unsigned int i = 0, n = this->alignment_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->alignment(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:vg.Fragment)
  return target;
}

int Fragment::ByteSize() const {
  int total_size = 0;

  // repeated .vg.Alignment alignment = 1;
  total_size += 1 * this->alignment_size();
  for (int i = 0; i < this->alignment_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->alignment(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Fragment::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Fragment* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Fragment>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Fragment::MergeFrom(const Fragment& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  alignment_.MergeFrom(from.alignment_);
}

void Fragment::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Fragment::CopyFrom(const Fragment& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Fragment::IsInitialized() const {

  return true;
}

void Fragment::Swap(Fragment* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Fragment::InternalSwap(Fragment* other) {
  alignment_.UnsafeArenaSwap(&other->alignment_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Fragment::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Fragment_descriptor_;
  metadata.reflection = Fragment_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Fragment

// repeated .vg.Alignment alignment = 1;
int Fragment::alignment_size() const {
  return alignment_.size();
}
void Fragment::clear_alignment() {
  alignment_.Clear();
}
const ::vg::Alignment& Fragment::alignment(int index) const {
  // @@protoc_insertion_point(field_get:vg.Fragment.alignment)
  return alignment_.Get(index);
}
::vg::Alignment* Fragment::mutable_alignment(int index) {
  // @@protoc_insertion_point(field_mutable:vg.Fragment.alignment)
  return alignment_.Mutable(index);
}
::vg::Alignment* Fragment::add_alignment() {
  // @@protoc_insertion_point(field_add:vg.Fragment.alignment)
  return alignment_.Add();
}
::google::protobuf::RepeatedPtrField< ::vg::Alignment >*
Fragment::mutable_alignment() {
  // @@protoc_insertion_point(field_mutable_list:vg.Fragment.alignment)
  return &alignment_;
}
const ::google::protobuf::RepeatedPtrField< ::vg::Alignment >&
Fragment::alignment() const {
  // @@protoc_insertion_point(field_list:vg.Fragment.alignment)
  return alignment_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int KmerMatch::kSequenceFieldNumber;
const int KmerMatch::kNodeIdFieldNumber;
const int KmerMatch::kPositionFieldNumber;
const int KmerMatch::kBackwardFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

KmerMatch::KmerMatch()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vg.KmerMatch)
}

void KmerMatch::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

KmerMatch::KmerMatch(const KmerMatch& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:vg.KmerMatch)
}

void KmerMatch::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  sequence_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  node_id_ = GOOGLE_LONGLONG(0);
  position_ = 0;
  backward_ = false;
}

KmerMatch::~KmerMatch() {
  // @@protoc_insertion_point(destructor:vg.KmerMatch)
  SharedDtor();
}

void KmerMatch::SharedDtor() {
  sequence_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void KmerMatch::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KmerMatch::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KmerMatch_descriptor_;
}

const KmerMatch& KmerMatch::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vg_2eproto();
  return *default_instance_;
}

KmerMatch* KmerMatch::default_instance_ = NULL;

KmerMatch* KmerMatch::New(::google::protobuf::Arena* arena) const {
  KmerMatch* n = new KmerMatch;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void KmerMatch::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<KmerMatch*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(node_id_, backward_);
  sequence_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool KmerMatch::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vg.KmerMatch)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string sequence = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sequence()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->sequence().data(), this->sequence().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "vg.KmerMatch.sequence"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_node_id;
        break;
      }

      // optional int64 node_id = 2;
      case 2: {
        if (tag == 16) {
         parse_node_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &node_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_position;
        break;
      }

      // optional sint32 position = 3;
      case 3: {
        if (tag == 24) {
         parse_position:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &position_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_backward;
        break;
      }

      // optional bool backward = 4;
      case 4: {
        if (tag == 32) {
         parse_backward:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &backward_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vg.KmerMatch)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vg.KmerMatch)
  return false;
#undef DO_
}

void KmerMatch::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vg.KmerMatch)
  // optional string sequence = 1;
  if (this->sequence().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sequence().data(), this->sequence().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vg.KmerMatch.sequence");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->sequence(), output);
  }

  // optional int64 node_id = 2;
  if (this->node_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->node_id(), output);
  }

  // optional sint32 position = 3;
  if (this->position() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(3, this->position(), output);
  }

  // optional bool backward = 4;
  if (this->backward() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->backward(), output);
  }

  // @@protoc_insertion_point(serialize_end:vg.KmerMatch)
}

::google::protobuf::uint8* KmerMatch::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:vg.KmerMatch)
  // optional string sequence = 1;
  if (this->sequence().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sequence().data(), this->sequence().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vg.KmerMatch.sequence");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->sequence(), target);
  }

  // optional int64 node_id = 2;
  if (this->node_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->node_id(), target);
  }

  // optional sint32 position = 3;
  if (this->position() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(3, this->position(), target);
  }

  // optional bool backward = 4;
  if (this->backward() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->backward(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:vg.KmerMatch)
  return target;
}

int KmerMatch::ByteSize() const {
  int total_size = 0;

  // optional string sequence = 1;
  if (this->sequence().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sequence());
  }

  // optional int64 node_id = 2;
  if (this->node_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->node_id());
  }

  // optional sint32 position = 3;
  if (this->position() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt32Size(
        this->position());
  }

  // optional bool backward = 4;
  if (this->backward() != 0) {
    total_size += 1 + 1;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KmerMatch::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const KmerMatch* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const KmerMatch>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void KmerMatch::MergeFrom(const KmerMatch& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.sequence().size() > 0) {

    sequence_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sequence_);
  }
  if (from.node_id() != 0) {
    set_node_id(from.node_id());
  }
  if (from.position() != 0) {
    set_position(from.position());
  }
  if (from.backward() != 0) {
    set_backward(from.backward());
  }
}

void KmerMatch::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KmerMatch::CopyFrom(const KmerMatch& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KmerMatch::IsInitialized() const {

  return true;
}

void KmerMatch::Swap(KmerMatch* other) {
  if (other == this) return;
  InternalSwap(other);
}
void KmerMatch::InternalSwap(KmerMatch* other) {
  sequence_.Swap(&other->sequence_);
  std::swap(node_id_, other->node_id_);
  std::swap(position_, other->position_);
  std::swap(backward_, other->backward_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata KmerMatch::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = KmerMatch_descriptor_;
  metadata.reflection = KmerMatch_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// KmerMatch

// optional string sequence = 1;
void KmerMatch::clear_sequence() {
  sequence_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& KmerMatch::sequence() const {
  // @@protoc_insertion_point(field_get:vg.KmerMatch.sequence)
  return sequence_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void KmerMatch::set_sequence(const ::std::string& value) {
  
  sequence_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:vg.KmerMatch.sequence)
}
 void KmerMatch::set_sequence(const char* value) {
  
  sequence_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:vg.KmerMatch.sequence)
}
 void KmerMatch::set_sequence(const char* value, size_t size) {
  
  sequence_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:vg.KmerMatch.sequence)
}
 ::std::string* KmerMatch::mutable_sequence() {
  
  // @@protoc_insertion_point(field_mutable:vg.KmerMatch.sequence)
  return sequence_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* KmerMatch::release_sequence() {
  
  return sequence_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void KmerMatch::set_allocated_sequence(::std::string* sequence) {
  if (sequence != NULL) {
    
  } else {
    
  }
  sequence_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sequence);
  // @@protoc_insertion_point(field_set_allocated:vg.KmerMatch.sequence)
}

// optional int64 node_id = 2;
void KmerMatch::clear_node_id() {
  node_id_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 KmerMatch::node_id() const {
  // @@protoc_insertion_point(field_get:vg.KmerMatch.node_id)
  return node_id_;
}
 void KmerMatch::set_node_id(::google::protobuf::int64 value) {
  
  node_id_ = value;
  // @@protoc_insertion_point(field_set:vg.KmerMatch.node_id)
}

// optional sint32 position = 3;
void KmerMatch::clear_position() {
  position_ = 0;
}
 ::google::protobuf::int32 KmerMatch::position() const {
  // @@protoc_insertion_point(field_get:vg.KmerMatch.position)
  return position_;
}
 void KmerMatch::set_position(::google::protobuf::int32 value) {
  
  position_ = value;
  // @@protoc_insertion_point(field_set:vg.KmerMatch.position)
}

// optional bool backward = 4;
void KmerMatch::clear_backward() {
  backward_ = false;
}
 bool KmerMatch::backward() const {
  // @@protoc_insertion_point(field_get:vg.KmerMatch.backward)
  return backward_;
}
 void KmerMatch::set_backward(bool value) {
  
  backward_ = value;
  // @@protoc_insertion_point(field_set:vg.KmerMatch.backward)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BasePileup::kRefBaseFieldNumber;
const int BasePileup::kNumBasesFieldNumber;
const int BasePileup::kBasesFieldNumber;
const int BasePileup::kQualitiesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BasePileup::BasePileup()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vg.BasePileup)
}

void BasePileup::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

BasePileup::BasePileup(const BasePileup& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:vg.BasePileup)
}

void BasePileup::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  ref_base_ = 0;
  num_bases_ = 0;
  bases_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  qualities_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

BasePileup::~BasePileup() {
  // @@protoc_insertion_point(destructor:vg.BasePileup)
  SharedDtor();
}

void BasePileup::SharedDtor() {
  bases_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  qualities_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void BasePileup::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BasePileup::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BasePileup_descriptor_;
}

const BasePileup& BasePileup::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vg_2eproto();
  return *default_instance_;
}

BasePileup* BasePileup::default_instance_ = NULL;

BasePileup* BasePileup::New(::google::protobuf::Arena* arena) const {
  BasePileup* n = new BasePileup;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BasePileup::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<BasePileup*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(ref_base_, num_bases_);
  bases_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  qualities_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool BasePileup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vg.BasePileup)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ref_base = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ref_base_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_num_bases;
        break;
      }

      // optional int32 num_bases = 2;
      case 2: {
        if (tag == 16) {
         parse_num_bases:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_bases_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_bases;
        break;
      }

      // optional string bases = 3;
      case 3: {
        if (tag == 26) {
         parse_bases:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bases()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->bases().data(), this->bases().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "vg.BasePileup.bases"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_qualities;
        break;
      }

      // optional bytes qualities = 4;
      case 4: {
        if (tag == 34) {
         parse_qualities:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_qualities()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vg.BasePileup)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vg.BasePileup)
  return false;
#undef DO_
}

void BasePileup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vg.BasePileup)
  // optional int32 ref_base = 1;
  if (this->ref_base() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ref_base(), output);
  }

  // optional int32 num_bases = 2;
  if (this->num_bases() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->num_bases(), output);
  }

  // optional string bases = 3;
  if (this->bases().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->bases().data(), this->bases().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vg.BasePileup.bases");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->bases(), output);
  }

  // optional bytes qualities = 4;
  if (this->qualities().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->qualities(), output);
  }

  // @@protoc_insertion_point(serialize_end:vg.BasePileup)
}

::google::protobuf::uint8* BasePileup::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:vg.BasePileup)
  // optional int32 ref_base = 1;
  if (this->ref_base() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ref_base(), target);
  }

  // optional int32 num_bases = 2;
  if (this->num_bases() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->num_bases(), target);
  }

  // optional string bases = 3;
  if (this->bases().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->bases().data(), this->bases().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vg.BasePileup.bases");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->bases(), target);
  }

  // optional bytes qualities = 4;
  if (this->qualities().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->qualities(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:vg.BasePileup)
  return target;
}

int BasePileup::ByteSize() const {
  int total_size = 0;

  // optional int32 ref_base = 1;
  if (this->ref_base() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->ref_base());
  }

  // optional int32 num_bases = 2;
  if (this->num_bases() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->num_bases());
  }

  // optional string bases = 3;
  if (this->bases().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->bases());
  }

  // optional bytes qualities = 4;
  if (this->qualities().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->qualities());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BasePileup::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const BasePileup* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const BasePileup>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BasePileup::MergeFrom(const BasePileup& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.ref_base() != 0) {
    set_ref_base(from.ref_base());
  }
  if (from.num_bases() != 0) {
    set_num_bases(from.num_bases());
  }
  if (from.bases().size() > 0) {

    bases_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bases_);
  }
  if (from.qualities().size() > 0) {

    qualities_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.qualities_);
  }
}

void BasePileup::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BasePileup::CopyFrom(const BasePileup& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BasePileup::IsInitialized() const {

  return true;
}

void BasePileup::Swap(BasePileup* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BasePileup::InternalSwap(BasePileup* other) {
  std::swap(ref_base_, other->ref_base_);
  std::swap(num_bases_, other->num_bases_);
  bases_.Swap(&other->bases_);
  qualities_.Swap(&other->qualities_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BasePileup::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BasePileup_descriptor_;
  metadata.reflection = BasePileup_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BasePileup

// optional int32 ref_base = 1;
void BasePileup::clear_ref_base() {
  ref_base_ = 0;
}
 ::google::protobuf::int32 BasePileup::ref_base() const {
  // @@protoc_insertion_point(field_get:vg.BasePileup.ref_base)
  return ref_base_;
}
 void BasePileup::set_ref_base(::google::protobuf::int32 value) {
  
  ref_base_ = value;
  // @@protoc_insertion_point(field_set:vg.BasePileup.ref_base)
}

// optional int32 num_bases = 2;
void BasePileup::clear_num_bases() {
  num_bases_ = 0;
}
 ::google::protobuf::int32 BasePileup::num_bases() const {
  // @@protoc_insertion_point(field_get:vg.BasePileup.num_bases)
  return num_bases_;
}
 void BasePileup::set_num_bases(::google::protobuf::int32 value) {
  
  num_bases_ = value;
  // @@protoc_insertion_point(field_set:vg.BasePileup.num_bases)
}

// optional string bases = 3;
void BasePileup::clear_bases() {
  bases_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& BasePileup::bases() const {
  // @@protoc_insertion_point(field_get:vg.BasePileup.bases)
  return bases_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BasePileup::set_bases(const ::std::string& value) {
  
  bases_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:vg.BasePileup.bases)
}
 void BasePileup::set_bases(const char* value) {
  
  bases_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:vg.BasePileup.bases)
}
 void BasePileup::set_bases(const char* value, size_t size) {
  
  bases_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:vg.BasePileup.bases)
}
 ::std::string* BasePileup::mutable_bases() {
  
  // @@protoc_insertion_point(field_mutable:vg.BasePileup.bases)
  return bases_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BasePileup::release_bases() {
  
  return bases_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BasePileup::set_allocated_bases(::std::string* bases) {
  if (bases != NULL) {
    
  } else {
    
  }
  bases_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bases);
  // @@protoc_insertion_point(field_set_allocated:vg.BasePileup.bases)
}

// optional bytes qualities = 4;
void BasePileup::clear_qualities() {
  qualities_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& BasePileup::qualities() const {
  // @@protoc_insertion_point(field_get:vg.BasePileup.qualities)
  return qualities_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BasePileup::set_qualities(const ::std::string& value) {
  
  qualities_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:vg.BasePileup.qualities)
}
 void BasePileup::set_qualities(const char* value) {
  
  qualities_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:vg.BasePileup.qualities)
}
 void BasePileup::set_qualities(const void* value, size_t size) {
  
  qualities_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:vg.BasePileup.qualities)
}
 ::std::string* BasePileup::mutable_qualities() {
  
  // @@protoc_insertion_point(field_mutable:vg.BasePileup.qualities)
  return qualities_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BasePileup::release_qualities() {
  
  return qualities_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BasePileup::set_allocated_qualities(::std::string* qualities) {
  if (qualities != NULL) {
    
  } else {
    
  }
  qualities_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), qualities);
  // @@protoc_insertion_point(field_set_allocated:vg.BasePileup.qualities)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NodePileup::kNodeIdFieldNumber;
const int NodePileup::kBasePileupFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NodePileup::NodePileup()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vg.NodePileup)
}

void NodePileup::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

NodePileup::NodePileup(const NodePileup& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:vg.NodePileup)
}

void NodePileup::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  node_id_ = GOOGLE_LONGLONG(0);
}

NodePileup::~NodePileup() {
  // @@protoc_insertion_point(destructor:vg.NodePileup)
  SharedDtor();
}

void NodePileup::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NodePileup::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NodePileup::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NodePileup_descriptor_;
}

const NodePileup& NodePileup::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vg_2eproto();
  return *default_instance_;
}

NodePileup* NodePileup::default_instance_ = NULL;

NodePileup* NodePileup::New(::google::protobuf::Arena* arena) const {
  NodePileup* n = new NodePileup;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NodePileup::Clear() {
  node_id_ = GOOGLE_LONGLONG(0);
  base_pileup_.Clear();
}

bool NodePileup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vg.NodePileup)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 node_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &node_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_base_pileup;
        break;
      }

      // repeated .vg.BasePileup base_pileup = 2;
      case 2: {
        if (tag == 18) {
         parse_base_pileup:
          DO_(input->IncrementRecursionDepth());
         parse_loop_base_pileup:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_base_pileup()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_base_pileup;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vg.NodePileup)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vg.NodePileup)
  return false;
#undef DO_
}

void NodePileup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vg.NodePileup)
  // optional int64 node_id = 1;
  if (this->node_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->node_id(), output);
  }

  // repeated .vg.BasePileup base_pileup = 2;
  for (unsigned int i = 0, n = this->base_pileup_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->base_pileup(i), output);
  }

  // @@protoc_insertion_point(serialize_end:vg.NodePileup)
}

::google::protobuf::uint8* NodePileup::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:vg.NodePileup)
  // optional int64 node_id = 1;
  if (this->node_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->node_id(), target);
  }

  // repeated .vg.BasePileup base_pileup = 2;
  for (unsigned int i = 0, n = this->base_pileup_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->base_pileup(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:vg.NodePileup)
  return target;
}

int NodePileup::ByteSize() const {
  int total_size = 0;

  // optional int64 node_id = 1;
  if (this->node_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->node_id());
  }

  // repeated .vg.BasePileup base_pileup = 2;
  total_size += 1 * this->base_pileup_size();
  for (int i = 0; i < this->base_pileup_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->base_pileup(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NodePileup::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const NodePileup* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const NodePileup>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NodePileup::MergeFrom(const NodePileup& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  base_pileup_.MergeFrom(from.base_pileup_);
  if (from.node_id() != 0) {
    set_node_id(from.node_id());
  }
}

void NodePileup::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NodePileup::CopyFrom(const NodePileup& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodePileup::IsInitialized() const {

  return true;
}

void NodePileup::Swap(NodePileup* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NodePileup::InternalSwap(NodePileup* other) {
  std::swap(node_id_, other->node_id_);
  base_pileup_.UnsafeArenaSwap(&other->base_pileup_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NodePileup::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NodePileup_descriptor_;
  metadata.reflection = NodePileup_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NodePileup

// optional int64 node_id = 1;
void NodePileup::clear_node_id() {
  node_id_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 NodePileup::node_id() const {
  // @@protoc_insertion_point(field_get:vg.NodePileup.node_id)
  return node_id_;
}
 void NodePileup::set_node_id(::google::protobuf::int64 value) {
  
  node_id_ = value;
  // @@protoc_insertion_point(field_set:vg.NodePileup.node_id)
}

// repeated .vg.BasePileup base_pileup = 2;
int NodePileup::base_pileup_size() const {
  return base_pileup_.size();
}
void NodePileup::clear_base_pileup() {
  base_pileup_.Clear();
}
const ::vg::BasePileup& NodePileup::base_pileup(int index) const {
  // @@protoc_insertion_point(field_get:vg.NodePileup.base_pileup)
  return base_pileup_.Get(index);
}
::vg::BasePileup* NodePileup::mutable_base_pileup(int index) {
  // @@protoc_insertion_point(field_mutable:vg.NodePileup.base_pileup)
  return base_pileup_.Mutable(index);
}
::vg::BasePileup* NodePileup::add_base_pileup() {
  // @@protoc_insertion_point(field_add:vg.NodePileup.base_pileup)
  return base_pileup_.Add();
}
::google::protobuf::RepeatedPtrField< ::vg::BasePileup >*
NodePileup::mutable_base_pileup() {
  // @@protoc_insertion_point(field_mutable_list:vg.NodePileup.base_pileup)
  return &base_pileup_;
}
const ::google::protobuf::RepeatedPtrField< ::vg::BasePileup >&
NodePileup::base_pileup() const {
  // @@protoc_insertion_point(field_list:vg.NodePileup.base_pileup)
  return base_pileup_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Genotype::kAlleleFieldNumber;
const int Genotype::kStartFieldNumber;
const int Genotype::kEndFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Genotype::Genotype()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vg.Genotype)
}

void Genotype::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  start_ = const_cast< ::vg::Position*>(&::vg::Position::default_instance());
  end_ = const_cast< ::vg::Position*>(&::vg::Position::default_instance());
}

Genotype::Genotype(const Genotype& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:vg.Genotype)
}

void Genotype::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  start_ = NULL;
  end_ = NULL;
}

Genotype::~Genotype() {
  // @@protoc_insertion_point(destructor:vg.Genotype)
  SharedDtor();
}

void Genotype::SharedDtor() {
  if (this != default_instance_) {
    delete start_;
    delete end_;
  }
}

void Genotype::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Genotype::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Genotype_descriptor_;
}

const Genotype& Genotype::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vg_2eproto();
  return *default_instance_;
}

Genotype* Genotype::default_instance_ = NULL;

Genotype* Genotype::New(::google::protobuf::Arena* arena) const {
  Genotype* n = new Genotype;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Genotype::Clear() {
  if (GetArenaNoVirtual() == NULL && start_ != NULL) delete start_;
  start_ = NULL;
  if (GetArenaNoVirtual() == NULL && end_ != NULL) delete end_;
  end_ = NULL;
  allele_.Clear();
}

bool Genotype::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vg.Genotype)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .vg.Path allele = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_allele:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_allele()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_allele;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(18)) goto parse_start;
        break;
      }

      // optional .vg.Position start = 2;
      case 2: {
        if (tag == 18) {
         parse_start:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_start()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_end;
        break;
      }

      // optional .vg.Position end = 3;
      case 3: {
        if (tag == 26) {
         parse_end:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_end()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vg.Genotype)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vg.Genotype)
  return false;
#undef DO_
}

void Genotype::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vg.Genotype)
  // repeated .vg.Path allele = 1;
  for (unsigned int i = 0, n = this->allele_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->allele(i), output);
  }

  // optional .vg.Position start = 2;
  if (this->has_start()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->start_, output);
  }

  // optional .vg.Position end = 3;
  if (this->has_end()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->end_, output);
  }

  // @@protoc_insertion_point(serialize_end:vg.Genotype)
}

::google::protobuf::uint8* Genotype::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:vg.Genotype)
  // repeated .vg.Path allele = 1;
  for (unsigned int i = 0, n = this->allele_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->allele(i), target);
  }

  // optional .vg.Position start = 2;
  if (this->has_start()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *this->start_, target);
  }

  // optional .vg.Position end = 3;
  if (this->has_end()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, *this->end_, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:vg.Genotype)
  return target;
}

int Genotype::ByteSize() const {
  int total_size = 0;

  // optional .vg.Position start = 2;
  if (this->has_start()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->start_);
  }

  // optional .vg.Position end = 3;
  if (this->has_end()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->end_);
  }

  // repeated .vg.Path allele = 1;
  total_size += 1 * this->allele_size();
  for (int i = 0; i < this->allele_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->allele(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Genotype::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Genotype* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Genotype>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Genotype::MergeFrom(const Genotype& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  allele_.MergeFrom(from.allele_);
  if (from.has_start()) {
    mutable_start()->::vg::Position::MergeFrom(from.start());
  }
  if (from.has_end()) {
    mutable_end()->::vg::Position::MergeFrom(from.end());
  }
}

void Genotype::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Genotype::CopyFrom(const Genotype& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Genotype::IsInitialized() const {

  return true;
}

void Genotype::Swap(Genotype* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Genotype::InternalSwap(Genotype* other) {
  allele_.UnsafeArenaSwap(&other->allele_);
  std::swap(start_, other->start_);
  std::swap(end_, other->end_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Genotype::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Genotype_descriptor_;
  metadata.reflection = Genotype_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Genotype

// repeated .vg.Path allele = 1;
int Genotype::allele_size() const {
  return allele_.size();
}
void Genotype::clear_allele() {
  allele_.Clear();
}
const ::vg::Path& Genotype::allele(int index) const {
  // @@protoc_insertion_point(field_get:vg.Genotype.allele)
  return allele_.Get(index);
}
::vg::Path* Genotype::mutable_allele(int index) {
  // @@protoc_insertion_point(field_mutable:vg.Genotype.allele)
  return allele_.Mutable(index);
}
::vg::Path* Genotype::add_allele() {
  // @@protoc_insertion_point(field_add:vg.Genotype.allele)
  return allele_.Add();
}
::google::protobuf::RepeatedPtrField< ::vg::Path >*
Genotype::mutable_allele() {
  // @@protoc_insertion_point(field_mutable_list:vg.Genotype.allele)
  return &allele_;
}
const ::google::protobuf::RepeatedPtrField< ::vg::Path >&
Genotype::allele() const {
  // @@protoc_insertion_point(field_list:vg.Genotype.allele)
  return allele_;
}

// optional .vg.Position start = 2;
bool Genotype::has_start() const {
  return !_is_default_instance_ && start_ != NULL;
}
void Genotype::clear_start() {
  if (GetArenaNoVirtual() == NULL && start_ != NULL) delete start_;
  start_ = NULL;
}
const ::vg::Position& Genotype::start() const {
  // @@protoc_insertion_point(field_get:vg.Genotype.start)
  return start_ != NULL ? *start_ : *default_instance_->start_;
}
::vg::Position* Genotype::mutable_start() {
  
  if (start_ == NULL) {
    start_ = new ::vg::Position;
  }
  // @@protoc_insertion_point(field_mutable:vg.Genotype.start)
  return start_;
}
::vg::Position* Genotype::release_start() {
  
  ::vg::Position* temp = start_;
  start_ = NULL;
  return temp;
}
void Genotype::set_allocated_start(::vg::Position* start) {
  delete start_;
  start_ = start;
  if (start) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:vg.Genotype.start)
}

// optional .vg.Position end = 3;
bool Genotype::has_end() const {
  return !_is_default_instance_ && end_ != NULL;
}
void Genotype::clear_end() {
  if (GetArenaNoVirtual() == NULL && end_ != NULL) delete end_;
  end_ = NULL;
}
const ::vg::Position& Genotype::end() const {
  // @@protoc_insertion_point(field_get:vg.Genotype.end)
  return end_ != NULL ? *end_ : *default_instance_->end_;
}
::vg::Position* Genotype::mutable_end() {
  
  if (end_ == NULL) {
    end_ = new ::vg::Position;
  }
  // @@protoc_insertion_point(field_mutable:vg.Genotype.end)
  return end_;
}
::vg::Position* Genotype::release_end() {
  
  ::vg::Position* temp = end_;
  end_ = NULL;
  return temp;
}
void Genotype::set_allocated_end(::vg::Position* end) {
  delete end_;
  end_ = end;
  if (end) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:vg.Genotype.end)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace vg

// @@protoc_insertion_point(global_scope)
